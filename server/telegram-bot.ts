import TelegramBot from 'node-telegram-bot-api';
import { storage } from './storage';
import crypto from 'crypto';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN || '';
const ADMIN_USER_ID = process.env.TELEGRAM_ADMIN_ID || process.env.ADMIN_ID || '681943543';

// Properly construct webapp URL without double protocol
function getWebAppUrl(): string {
  let url = process.env.WEBAPP_URL || process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000';
  
  // Remove any existing protocol to avoid double prefixing
  url = url.replace(/^https?:\/\//, '');
  
  // Add https protocol (required for Telegram Mini Apps)
  return `https://${url}`;
}

const WEBAPP_URL = getWebAppUrl();

if (!BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required');
}

// Validate webapp URL format
try {
  new URL(WEBAPP_URL);
  console.log(`[Telegram Bot] Using webapp URL: ${WEBAPP_URL}`);
} catch (error) {
  throw new Error(`Invalid WEBAPP_URL format: ${WEBAPP_URL}`);
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Anonymous names are now auto-generated in storage as Student_{id}

// Handle /start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = BigInt(msg.from?.id || 0);
  const username = msg.from?.username;

  try {
    // Check if user already exists
    let user = await storage.getUserByTgId(userId);
    
    if (!user) {
      // Create new user with pending status
      user = await storage.createUser({
        tgId: userId,
        username: username || null,
        status: 'approved',
      });
    }

    // Prepare welcome message with app description
    const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é —Å–æ—Ü—Å–µ—Ç—å!**

üéì –≠—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ
‚Ä¢ –û–±—â–∞—Ç—å—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ
‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–∑–µ–π
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

‚úÖ **–°—Ç–∞—Ç—É—Å:** –û–¥–æ–±—Ä–µ–Ω–æ
–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!`;

    // Create keyboard with app launch button
    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç',
          web_app: { url: WEBAPP_URL }
        }
      ]]
    };

    await bot.sendMessage(chatId, 
      welcomeMessage,
      { 
        parse_mode: 'Markdown',
        reply_markup: keyboard
      }
    );

  } catch (error) {
    console.error('Error in /start command:', error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});



export { bot };
