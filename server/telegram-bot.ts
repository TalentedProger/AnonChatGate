import TelegramBot from 'node-telegram-bot-api';
import { storage } from './storage';
import crypto from 'crypto';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN || '';
const ADMIN_USER_ID = process.env.TELEGRAM_ADMIN_ID || process.env.ADMIN_ID || '681943543';

// Properly construct webapp URL without double protocol
function getWebAppUrl(): string {
  let url = process.env.WEBAPP_URL || process.env.REPLIT_DOMAINS?.split(',')[0] || 'localhost:5000';
  
  // Remove any existing protocol to avoid double prefixing
  url = url.replace(/^https?:\/\//, '');
  
  // Add https protocol (required for Telegram Mini Apps)
  return `https://${url}`;
}

const WEBAPP_URL = getWebAppUrl();

if (!BOT_TOKEN) {
  throw new Error('TELEGRAM_BOT_TOKEN is required');
}

// Validate webapp URL format
try {
  new URL(WEBAPP_URL);
  console.log(`[Telegram Bot] Using webapp URL: ${WEBAPP_URL}`);
} catch (error) {
  throw new Error(`Invalid WEBAPP_URL format: ${WEBAPP_URL}`);
}

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// Anonymous names are now auto-generated in storage as Student_{id}

// Handle all messages (including /start and other commands)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = BigInt(msg.from?.id || 0);
  const username = msg.from?.username;
  const messageText = msg.text?.toLowerCase();

  try {
    // Handle /start command or when user wants to access the app
    if (messageText?.includes('/start') || messageText?.includes('—Å—Ç–∞—Ä—Ç') || messageText?.includes('–Ω–∞—á–∞—Ç—å')) {
      // Check if user already exists
      let user = await storage.getUserByTgId(userId);
      
      if (!user) {
        // Create new user - auto-approve only in development
        const userStatus = process.env.NODE_ENV === 'production' ? 'pending' : 'approved';
        user = await storage.createUser({
          tgId: userId,
          username: username || null,
          status: userStatus,
        });
      } else {
        // Update existing user to approved status only in development
        if (user.status !== 'approved' && process.env.NODE_ENV !== 'production') {
          await storage.updateUserStatus(user.id, 'approved');
          user = await storage.getUserByTgId(userId);
        }
      }

      // Prepare welcome message with app description
      const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é —Å–æ—Ü—Å–µ—Ç—å!**

üéì –≠—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ –ó–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ–¥–Ω–æ–∫—É—Ä—Å–Ω–∏–∫–∞–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ
‚Ä¢ –û–±—â–∞—Ç—å—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥–µ
‚Ä¢ –î–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–∑–µ–π
‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

‚úÖ **–°—Ç–∞—Ç—É—Å:** –û–¥–æ–±—Ä–µ–Ω–æ
–í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!`;

      // Create keyboard with app launch button
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: WEBAPP_URL }
          }
        ]]
      };

      await bot.sendMessage(chatId, 
        welcomeMessage,
        { 
          parse_mode: 'Markdown',
          reply_markup: keyboard
        }
      );
    } else {
      // Handle other messages by showing the start keyboard
      const keyboard = {
        inline_keyboard: [[
          {
            text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
            web_app: { url: WEBAPP_URL }
          }
        ]]
      };

      await bot.sendMessage(chatId, 
        'üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫—É—é —Å–æ—Ü—Å–µ—Ç—å:',
        { 
          reply_markup: keyboard
        }
      );
    }

  } catch (error) {
    console.error('Error in bot message handler:', error);
    console.error('Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    
    // Simple error response without revealing technical details
    try {
      await bot.sendMessage(chatId, '‚ö° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
    } catch (sendError) {
      console.error('Failed to send error message:', sendError);
    }
  }
});



export { bot };
