{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Telegram Mini App for anonymous chat/messaging that runs inside the Telegram WebApp environment. The application provides a minimal MVP for testing anonymous chat functionality before deployment to a full server (VPS/Docker). Users can access the app through a Telegram bot, authenticate using Telegram's initData, and participate in global chat rooms with anonymous profiles.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Framework**: Tailwind CSS with shadcn/ui component library for consistent design\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time Communication**: WebSocket connection for live chat functionality\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Real-time**: WebSocket implementation for chat messaging\n- **Authentication**: Telegram WebApp initData verification using HMAC-SHA256\n- **API Design**: RESTful API for authentication and data operations, WebSocket for real-time chat\n\n## Database Schema\n- **Users Table**: Stores Telegram ID, username, anonymous name, and approval status\n- **Rooms Table**: Chat rooms with global and private room types\n- **Messages Table**: Chat messages linked to users and rooms with timestamps\n- **User Status System**: Pending/approved/rejected status for moderation workflow\n\n## Authentication & Authorization\n- **Telegram Integration**: Uses Telegram WebApp initData for secure authentication\n- **Anonymous Profiles**: Generates random anonymous names while maintaining session security\n- **Moderation System**: Admin approval workflow through Telegram bot commands\n- **Session Management**: Stateless authentication using Telegram's cryptographic verification\n\n## Real-time Communication\n- **WebSocket Protocol**: Direct WebSocket connection for instant messaging\n- **Message Broadcasting**: Real-time message delivery to all connected clients\n- **Connection Management**: Automatic reconnection and connection state tracking\n- **Room-based Messaging**: Support for global chat and future private room functionality\n\n# External Dependencies\n\n## Database\n- **Neon Database**: PostgreSQL-compatible serverless database using @neondatabase/serverless\n- **Connection Pooling**: Configured for serverless environments with WebSocket support\n\n## Telegram Integration\n- **Telegram Bot API**: node-telegram-bot-api for bot functionality and admin commands\n- **WebApp API**: Browser-based Telegram WebApp SDK for client authentication\n- **Bot Token**: Required environment variable for Telegram bot operations\n\n## Development Tools\n- **Build System**: Vite with TypeScript support and React plugin\n- **Code Quality**: TypeScript for type safety and ESLint configuration\n- **UI Components**: Radix UI primitives with shadcn/ui styling system\n- **Styling**: Tailwind CSS with PostCSS processing\n\n## Deployment Environment\n- **Replit Integration**: Configured for Replit deployment with development plugins\n- **Environment Variables**: DATABASE_URL, TELEGRAM_BOT_TOKEN, WEBAPP_URL for configuration\n- **Hot Reload**: Development server with HMR support for rapid iteration","size_bytes":3398},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/futuristic_profile_ui (4)_1757790004974.jsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { Heart, Star, Send, Instagram, Settings, Plus, EyeOff } from \"lucide-react\";\nimport { useState } from \"react\";\n\nexport default function FuturisticProfile() {\n  const [activeProfile, setActiveProfile] = useState(\"main\");\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen w-full bg-gradient-to-b from-black via-[#0a001a] to-[#050010] text-white p-6 flex flex-col items-center\">\n      {/* Compact Switcher */}\n      <div className=\"fixed top-6 left-6 flex items-center bg-white/10 backdrop-blur-md rounded-full p-1 z-50\">\n        {[\n          { key: \"main\", src: \"https://cdn-icons-png.flaticon.com/512/1077/1077063.png\" }, // black profile icon\n          { key: \"anon\", src: \"https://cdn-icons-png.flaticon.com/512/747/747376.png\" },\n        ].map((profile) => (\n          <motion.div\n            key={profile.key}\n            whileTap={{ scale: 0.9 }}\n            onClick={() => setActiveProfile(profile.key)}\n            className={`w-10 h-10 rounded-full flex items-center justify-center cursor-pointer transition-colors ${\n              activeProfile === profile.key ? \"bg-white\" : \"bg-transparent\"\n            }`}\n          >\n            <img src={profile.src} alt={profile.key} className=\"w-6 h-6\" />\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Menu button */}\n      <div className=\"fixed top-6 right-6 z-50\">\n        <div className=\"relative\">\n          <button\n            onClick={() => setMenuOpen(!menuOpen)}\n            className=\"w-10 h-10 flex items-center justify-center rounded-full bg-black hover:bg-violet-600 transition-colors\"\n          >\n            <Settings className=\"text-white\" />\n          </button>\n          <AnimatePresence>\n            {menuOpen && (\n              <motion.div\n                initial={{ opacity: 0, y: -10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                transition={{ duration: 0.2 }}\n                className=\"absolute right-0 mt-2 w-48 bg-black border border-gray-700 rounded-xl shadow-lg overflow-hidden\"\n              >\n                <ul className=\"flex flex-col text-left text-sm\">\n                  <li className=\"px-4 py-2 hover:bg-gray-800 cursor-pointer\">Редактировать профиль</li>\n                  <li className=\"px-4 py-2 hover:bg-gray-800 cursor-pointer\">Изменить фото</li>\n                  <li className=\"px-4 py-2 hover:bg-gray-800 cursor-pointer\">Помощь</li>\n                  <li className=\"px-4 py-2 hover:bg-gray-800 cursor-pointer\">Настройки</li>\n                </ul>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n\n      {/* Animated profile switch */}\n      <div className=\"w-full max-w-3xl mt-20\">\n        <AnimatePresence mode=\"wait\">\n          {activeProfile === \"main\" ? (\n            <motion.div\n              key=\"main\"\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -50 }}\n              transition={{ duration: 0.3 }}\n              className=\"flex flex-col items-center space-y-6\"\n            >\n              <div className=\"relative w-32 h-32 rounded-full flex items-center justify-center bg-gradient-to-br from-pink-500 via-cyan-500 to-violet-500\">\n                <span className=\"text-3xl font-bold text-white\">1</span>\n                <div className=\"absolute bottom-2 right-2 w-4 h-4 rounded-full bg-green-500 border-2 border-black\"></div>\n              </div>\n              <h1 className=\"text-2xl font-bold text-white\">CyberStudent</h1>\n              <p className=\"text-sm text-indigo-300\">3 курс • Прикладная информатика</p>\n\n              {/* Metrics */}\n              <div className=\"grid grid-cols-2 gap-4 w-full\">\n                <MetricCard\n                  icon={<Heart className=\"text-red-500 fill-red-500\" />}\n                  value=\"128\"\n                  label=\"Знакомства\"\n                  borderColor=\"border-red-500 shadow-[0_0_10px_#ff000080]\"\n                />\n                <MetricCard\n                  icon={<Star className=\"text-yellow-400 fill-yellow-400\" />}\n                  value=\"542\"\n                  label=\"Популярность\"\n                  borderColor=\"border-yellow-400 shadow-[0_0_10px_#ffff0080]\"\n                />\n              </div>\n\n              {/* About */}\n              <Section title=\"О себе\">\n                <p className=\"text-gray-300\">\n                  Люблю создавать интерфейсы будущего. Код для меня — это искусство, а дизайн — способ общения. Люблю создавать интерфейсы будущего. Код для меня — это искусство, а дизайн — способ общения.\n                </p>\n              </Section>\n\n              {/* Links */}\n              <Section title=\"Ссылки\">\n                <div className=\"flex gap-3 overflow-x-auto pb-2\">\n                  <SocialButton icon={<Send className=\"w-6 h-6 text-cyan-400\" />} label=\"Telegram\" />\n                  <SocialButton icon={<img src=\"https://cdn.worldvectorlogo.com/logos/vk-com-logo.svg\" alt=\"VK\" className=\"w-6 h-6\" />} label=\"Vkontakte\" />\n                  <SocialButton icon={<Instagram className=\"w-6 h-6 text-violet-400\" />} label=\"Instagram\" />\n                </div>\n              </Section>\n\n              {/* Album */}\n              <Section title=\"Фотоальбом\">\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"rounded-xl overflow-hidden border border-white/30 flex items-center justify-center bg-white/10 aspect-[3/4]\"\n                    >\n                      <Plus className=\"w-6 h-6 text-white/60\" />\n                    </motion.div>\n                  ))}\n                </div>\n              </Section>\n            </motion.div>\n          ) : (\n            <motion.div\n              key=\"anon\"\n              initial={{ opacity: 0, x: 50 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -50 }}\n              transition={{ duration: 0.3 }}\n              className=\"flex flex-col items-center space-y-6\"\n            >\n              <div className=\"relative w-32 h-32 rounded-full flex items-center justify-center bg-gradient-to-br from-pink-500 via-cyan-500 to-violet-500\">\n                <span className=\"text-3xl font-bold text-white\">1</span>\n                <div className=\"absolute bottom-2 right-2 w-4 h-4 rounded-full bg-green-500 border-2 border-black\"></div>\n              </div>\n              <h2 className=\"text-2xl font-bold\">Student_1</h2>\n\n              {/* Metrics */}\n              <div className=\"grid grid-cols-2 gap-4 w-full\">\n                <MetricCard\n                  icon={<Heart className=\"text-red-500 fill-red-500\" />}\n                  value=\"?\"\n                  label=\"Знакомства\"\n                  borderColor=\"border-red-500 shadow-[0_0_10px_#ff000080]\"\n                />\n                <MetricCard\n                  icon={<Star className=\"text-yellow-400 fill-yellow-400\" />}\n                  value=\"?\"\n                  label=\"Популярность\"\n                  borderColor=\"border-yellow-400 shadow-[0_0_10px_#ffff0080]\"\n                />\n              </div>\n\n              {/* About blurred */}\n              <Section title=\"О себе\" locked>\n                <p className=\"text-gray-300 blur-sm select-none\">\n                  Люблю создавать интерфейсы будущего. Код для меня — это искусство, а дизайн — способ общения. Люблю создавать интерфейсы будущего. Код для меня — это искусство, а дизайн — способ общения.\n                </p>\n              </Section>\n\n              {/* Links blurred */}\n              <Section title=\"Ссылки\" locked>\n                <div className=\"flex gap-3 overflow-x-auto pb-2 opacity-50 blur-[1px]\">\n                  <SocialButton icon={<Send className=\"w-6 h-6 text-cyan-400\" />} label=\"Telegram\" />\n                  <SocialButton icon={<img src=\"https://cdn.worldvectorlogo.com/logos/vk-com-logo.svg\" alt=\"VK\" className=\"w-6 h-6\" />} label=\"Vkontakte\" />\n                  <SocialButton icon={<Instagram className=\"w-6 h-6 text-violet-400\" />} label=\"Instagram\" />\n                </div>\n              </Section>\n\n              {/* Album blurred */}\n              <Section title=\"Фотоальбом\" locked>\n                <div className=\"grid grid-cols-3 gap-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"rounded-xl overflow-hidden border border-white/30 flex items-center justify-center bg-white/10 aspect-[3/4]\"\n                    >\n                      <EyeOff className=\"w-6 h-6 text-white/60\" />\n                    </motion.div>\n                  ))}\n                </div>\n              </Section>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}\n\nfunction MetricCard({ icon, value, label, borderColor }) {\n  return (\n    <div>\n      <Card className={`rounded-2xl bg-transparent border-2 ${borderColor} overflow-hidden`}>\n        <CardContent className=\"flex flex-col items-center py-2 text-white\">\n          <div className=\"mb-1\">{icon}</div>\n          <p className=\"text-xl font-bold\">{value}</p>\n          <span className=\"text-xs\">{label}</span>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nfunction Section({ title, children, locked }) {\n  return (\n    <div className=\"space-y-2 mt-2 bg-black/20 rounded-xl p-3 w-full shadow-md shadow-white/5\">\n      <h2 className=\"font-semibold text-lg flex items-center justify-between\">\n        <span className=\"flex items-center gap-2\">\n          <span className=\"text-white\">•</span>\n          {title}\n        </span>\n        {locked && <span className=\"text-white text-sm\">🔒</span>}\n      </h2>\n      {children}\n    </div>\n  );\n}\n\nfunction SocialButton({ icon, label }) {\n  return (\n    <motion.div\n      whileHover={{ boxShadow: \"0 0 15px rgba(177, 0, 255, 0.6)\" }}\n      className=\"flex flex-col items-center justify-center w-24 h-24 bg-black/40 rounded-xl transition-all\"\n    >\n      <div className=\"mb-2\">{icon}</div>\n      <span className=\"text-sm\">{label}</span>\n    </motion.div>\n  );\n}\n","size_bytes":10868},"client/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,300..800;1,300..800&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 14%, 96%);\n  --foreground: hsl(220, 9%, 9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 9%, 9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 9%, 9%);\n  --primary: hsl(199, 98%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 14%, 94%);\n  --secondary-foreground: hsl(220, 9%, 9%);\n  --muted: hsl(220, 14%, 94%);\n  --muted-foreground: hsl(220, 9%, 46%);\n  --accent: hsl(199, 98%, 48%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(199, 98%, 40%);\n  --chart-1: hsl(199, 98%, 40%);\n  --chart-2: hsl(120, 61%, 50%);\n  --chart-3: hsl(45, 93%, 47%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(342, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(220, 9%, 9%);\n  --sidebar-primary: hsl(199, 98%, 40%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(199, 98%, 48%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(199, 98%, 40%);\n  --font-sans: 'Open Sans', -apple-system, BlinkMacSystemFont, 'Helvetica Neue', Roboto, Arial, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --pending: hsl(45, 93%, 47%);\n  --success: hsl(120, 61%, 50%);\n  --warning: hsl(38, 92%, 50%);\n  --telegram: hsl(199, 98%, 40%);\n  --telegram-light: hsl(199, 98%, 48%);\n}\n\n.dark {\n  --background: hsl(220, 14%, 4%);\n  --foreground: hsl(220, 9%, 91%);\n  --card: hsl(220, 14%, 8%);\n  --card-foreground: hsl(220, 9%, 91%);\n  --popover: hsl(220, 14%, 4%);\n  --popover-foreground: hsl(220, 9%, 91%);\n  --primary: hsl(199, 98%, 40%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 14%, 12%);\n  --secondary-foreground: hsl(220, 9%, 91%);\n  --muted: hsl(220, 14%, 12%);\n  --muted-foreground: hsl(220, 9%, 54%);\n  --accent: hsl(199, 98%, 48%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 18%);\n  --input: hsl(220, 13%, 18%);\n  --ring: hsl(199, 98%, 40%);\n  --chart-1: hsl(199, 98%, 40%);\n  --chart-2: hsl(120, 61%, 50%);\n  --chart-3: hsl(45, 93%, 47%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(342, 75%, 51%);\n  --sidebar: hsl(220, 14%, 8%);\n  --sidebar-foreground: hsl(220, 9%, 91%);\n  --sidebar-primary: hsl(199, 98%, 40%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(199, 98%, 48%);\n  --sidebar-accent-foreground: hsl(0, 0%, 100%);\n  --sidebar-border: hsl(220, 13%, 18%);\n  --sidebar-ring: hsl(199, 98%, 40%);\n  --pending: hsl(45, 93%, 47%);\n  --success: hsl(120, 61%, 50%);\n  --warning: hsl(38, 92%, 50%);\n  --telegram: hsl(199, 98%, 40%);\n  --telegram-light: hsl(199, 98%, 48%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html, body, #root {\n    height: 100%;\n  }\n}\n\n/* Hide scrollbar but keep functionality */\n.scrollbar-hide {\n  -ms-overflow-style: none;\n  scrollbar-width: none;\n}\n\n.scrollbar-hide::-webkit-scrollbar {\n  display: none;\n}\n\n/* Custom animations */\n@keyframes fadeIn {\n  from { \n    opacity: 0; \n    transform: translateY(10px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(100%); \n  }\n  to { \n    transform: translateY(0); \n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.5s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.3s ease-out;\n}\n\n.animate-pulse-slow {\n  animation: pulse 3s infinite;\n}\n\n.animate-bounce-gentle {\n  animation: bounce 2s infinite;\n}\n","size_bytes":3964},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { db } from \"./db\";\nimport { users, rooms } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Database will be initialized on demand through storage operations\n\n  // Initialize Telegram bot\n  try {\n    if (process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN) {\n      await import(\"./telegram-bot\");\n      log(\"Telegram bot initialized\");\n    } else {\n      log(\"Warning: TELEGRAM_BOT_TOKEN not provided, bot not started\");\n    }\n  } catch (error) {\n    log(\"Error initializing Telegram bot:\", String(error));\n  }\n\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2603},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupWebSocket } from \"./websocket\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { generateAuthToken, generateRefreshToken, verifyRefreshToken } from \"./auth\";\nimport crypto from 'crypto';\nimport querystring from 'querystring';\n\nfunction parseInitData(initData: string) {\n  return querystring.parse(initData);\n}\n\nfunction verifyInitData(initData: string, botToken: string): boolean {\n  try {\n    const params = initData.split('&').map(p => p.split('='));\n    const kv: Record<string, string> = {};\n    \n    for (const [k, v] of params) {\n      if (!k) continue;\n      kv[k] = decodeURIComponent(v || '');\n    }\n    \n    const hash = kv['hash'];\n    if (!hash) return false;\n    \n    const keys = Object.keys(kv).filter(k => k !== 'hash').sort();\n    const data_check_arr = keys.map(k => `${k}=${kv[k]}`);\n    const data_check_string = data_check_arr.join('\\n');\n\n    const secret = crypto.createHash('sha256').update(botToken).digest();\n    const hmac = crypto.createHmac('sha256', secret).update(data_check_string).digest('hex');\n\n    return crypto.timingSafeEqual(Buffer.from(hmac, 'hex'), Buffer.from(hash, 'hex'));\n  } catch (error) {\n    console.error('Init data verification error:', error);\n    return false;\n  }\n}\n\nfunction generateAnonName(): string {\n  const prefixes = ['User', 'Anon', 'Guest', 'Member'];\n  const suffix = Math.floor(Math.random() * 9000) + 1000;\n  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n  return `${prefix}${suffix}`;\n}\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // Setup WebSocket\n  setupWebSocket(httpServer);\n\n  // Health check\n  app.get('/api/health', (req, res) => {\n    res.json({ ok: true, timestamp: new Date().toISOString() });\n  });\n\n  // Development-only auth endpoint for testing\n  app.post('/api/auth/dev', async (req, res) => {\n    // CRITICAL SECURITY: Multiple layers of production protection\n    \n    // Primary check: NODE_ENV must not be production\n    if (process.env.NODE_ENV === 'production') {\n      console.warn(`[SECURITY] Dev endpoint access attempt blocked in production from IP: ${req.ip}`);\n      return res.status(403).json({ error: 'Dev endpoint not available in production' });\n    }\n\n    // Secondary check: Explicitly require DEV_MODE flag\n    if (process.env.DEV_MODE !== 'true') {\n      console.warn(`[SECURITY] Dev endpoint access blocked - DEV_MODE not enabled from IP: ${req.ip}`);\n      return res.status(403).json({ error: 'Dev endpoint disabled' });\n    }\n\n    // Tertiary check: Block if JWT_SECRET is production-grade (longer than dev fallback)\n    const jwtSecret = process.env.JWT_SECRET;\n    if (jwtSecret && jwtSecret.length > 50) {\n      console.warn(`[SECURITY] Dev endpoint blocked - production JWT detected from IP: ${req.ip}`);\n      return res.status(403).json({ error: 'Dev endpoint not available with production secrets' });\n    }\n\n    try {\n      // Allow specifying tgId for testing different users\n      const { tgId } = req.body;\n      const targetTgId = tgId ? BigInt(tgId) : BigInt(999999);\n      \n      // Get the specified user\n      let user = await storage.getUserByTgId(targetTgId);\n      \n      if (!user) {\n        user = await storage.createUser({\n          tgId: targetTgId,\n          username: null,\n          anonName: generateAnonName(),\n          status: targetTgId === BigInt(999999) ? 'approved' : 'pending',\n        });\n      }\n\n      const token = generateAuthToken(user);\n      const refreshToken = generateRefreshToken(user);\n\n      console.log(`[DEV AUTH] Authenticated as user ${user.id} (${user.anonName}) with status: ${user.status}`);\n\n      res.json({\n        user: {\n          id: user.id,\n          anonName: user.anonName,\n          status: user.status,\n          createdAt: user.createdAt,\n        },\n        status: user.status,\n        token,\n        refreshToken\n      });\n\n    } catch (error) {\n      console.error('Dev auth error:', error);\n      res.status(500).json({ error: 'Dev authentication failed' });\n    }\n  });\n\n  // Authentication endpoint\n  app.post('/api/auth', async (req, res) => {\n    try {\n      const { initData } = req.body;\n      \n      console.log('[DEBUG] Auth request received:', {\n        hasInitData: !!initData,\n        initDataLength: initData?.length || 0,\n        initDataPreview: initData?.substring(0, 50) + '...'\n      });\n      \n      if (!initData) {\n        console.log('[DEBUG] No initData provided');\n        return res.status(400).json({ error: 'initData required' });\n      }\n\n      const botToken = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN || '';\n      if (!botToken) {\n        return res.status(500).json({ error: 'Bot token not configured' });\n      }\n\n      // Verify initData\n      const isValid = verifyInitData(initData, botToken);\n      if (!isValid) {\n        return res.status(401).json({ error: 'Invalid initData' });\n      }\n\n      // Parse user data from initData\n      const parsed = parseInitData(initData);\n      let userData = null;\n      \n      if (parsed.user && typeof parsed.user === 'string') {\n        try {\n          userData = JSON.parse(parsed.user);\n        } catch (e) {\n          console.error('Failed to parse user data from initData:', e);\n        }\n      }\n\n      if (!userData || !userData.id) {\n        return res.status(400).json({ error: 'Invalid user data in initData' });\n      }\n\n      const tgId = BigInt(userData.id);\n      let user = await storage.getUserByTgId(tgId);\n\n      // Create user if not exists\n      if (!user) {\n        user = await storage.createUser({\n          tgId,\n          username: userData.username || null,\n          anonName: generateAnonName(),\n          status: 'pending',\n        });\n      }\n\n      const token = generateAuthToken(user);\n      const refreshToken = generateRefreshToken(user);\n\n      res.json({\n        user: {\n          id: user.id,\n          anonName: user.anonName,\n          status: user.status,\n          createdAt: user.createdAt,\n        },\n        status: user.status,\n        token,\n        refreshToken\n      });\n\n    } catch (error) {\n      console.error('Auth error:', error);\n      res.status(500).json({ error: 'Authentication failed' });\n    }\n  });\n\n  // Token refresh endpoint\n  app.post('/api/auth/refresh', async (req, res) => {\n    try {\n      const { refreshToken } = req.body;\n      \n      if (!refreshToken) {\n        return res.status(400).json({ error: 'Refresh token required' });\n      }\n\n      // Verify the refresh token\n      const tokenData = verifyRefreshToken(refreshToken);\n      if (!tokenData) {\n        return res.status(401).json({ error: 'Invalid or expired refresh token' });\n      }\n\n      // Get current user data to ensure still valid\n      const user = await storage.getUserById(tokenData.userId);\n      if (!user) {\n        return res.status(401).json({ error: 'User not found' });\n      }\n\n      // Check if user status matches token (prevent using old tokens after status change)\n      if (user.status !== tokenData.status) {\n        return res.status(401).json({ error: 'User status has changed. Please re-authenticate' });\n      }\n\n      // Generate new tokens\n      const newToken = generateAuthToken(user);\n      const newRefreshToken = generateRefreshToken(user);\n\n      res.json({\n        user: {\n          id: user.id,\n          anonName: user.anonName,\n          status: user.status,\n          createdAt: user.createdAt,\n        },\n        status: user.status,\n        token: newToken,\n        refreshToken: newRefreshToken\n      });\n\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      res.status(500).json({ error: 'Token refresh failed' });\n    }\n  });\n\n  // Get chat history\n  app.get('/api/messages/:roomId?', async (req, res) => {\n    try {\n      const roomId = req.params.roomId ? parseInt(req.params.roomId) : null;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n\n      let targetRoomId = roomId;\n      if (!targetRoomId) {\n        const globalRoom = await storage.getOrCreateGlobalRoom();\n        targetRoomId = globalRoom.id;\n      }\n\n      const messages = await storage.getMessagesByRoomId(targetRoomId, limit);\n      \n      res.json({\n        messages: messages.map(msg => ({\n          id: msg.id,\n          content: msg.content,\n          createdAt: msg.createdAt,\n          user: msg.user ? {\n            id: msg.user.id,\n            anonName: msg.user.anonName\n          } : null\n        }))\n      });\n\n    } catch (error) {\n      console.error('Get messages error:', error);\n      res.status(500).json({ error: 'Failed to load messages' });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":8826},"server/storage.ts":{"content":"import { users, messages, rooms, type User, type InsertUser, type Message, type InsertMessage, type Room, type InsertRoom } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUserById(id: number): Promise<User | undefined>;\n  getUserByTgId(tgId: bigint): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserStatus(id: number, status: \"pending\" | \"approved\" | \"rejected\"): Promise<User | undefined>;\n  getPendingUsers(): Promise<User[]>;\n\n  // Message operations\n  getMessagesByRoomId(roomId: number, limit?: number): Promise<(Message & { user: User | null })[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n\n  // Room operations\n  getRoomById(id: number): Promise<Room | undefined>;\n  createRoom(room: InsertRoom): Promise<Room>;\n  getOrCreateGlobalRoom(): Promise<Room>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUserById(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByTgId(tgId: bigint): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.tgId, tgId));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUserStatus(id: number, status: \"pending\" | \"approved\" | \"rejected\"): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ status })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.status, \"pending\"));\n  }\n\n  async getMessagesByRoomId(roomId: number, limit: number = 50): Promise<(Message & { user: User | null })[]> {\n    const result = await db\n      .select({\n        id: messages.id,\n        roomId: messages.roomId,\n        userId: messages.userId,\n        content: messages.content,\n        createdAt: messages.createdAt,\n        user: users,\n      })\n      .from(messages)\n      .leftJoin(users, eq(messages.userId, users.id))\n      .where(eq(messages.roomId, roomId))\n      .orderBy(desc(messages.createdAt))\n      .limit(limit);\n\n    return result.reverse();\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async getRoomById(id: number): Promise<Room | undefined> {\n    const [room] = await db.select().from(rooms).where(eq(rooms.id, id));\n    return room || undefined;\n  }\n\n  async createRoom(insertRoom: InsertRoom): Promise<Room> {\n    const [room] = await db\n      .insert(rooms)\n      .values(insertRoom)\n      .returning();\n    return room;\n  }\n\n  async getOrCreateGlobalRoom(): Promise<Room> {\n    const [existingRoom] = await db.select().from(rooms).where(eq(rooms.name, \"global\"));\n    if (existingRoom) {\n      return existingRoom;\n    }\n\n    return await this.createRoom({\n      name: \"global\",\n      type: \"global\",\n    });\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":3341},"server/telegram-bot.ts":{"content":"import TelegramBot from 'node-telegram-bot-api';\nimport { storage } from './storage';\nimport crypto from 'crypto';\n\nconst BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN || '';\nconst ADMIN_USER_ID = process.env.TELEGRAM_ADMIN_ID || process.env.ADMIN_ID || '';\nconst WEBAPP_URL = process.env.WEBAPP_URL || process.env.REPLIT_DOMAINS?.split(',')[0] || 'http://localhost:5000';\n\nif (!BOT_TOKEN) {\n  throw new Error('TELEGRAM_BOT_TOKEN is required');\n}\n\nconst bot = new TelegramBot(BOT_TOKEN, { polling: true });\n\n// Generate anonymous name\nfunction generateAnonName(): string {\n  const prefixes = ['User', 'Anon', 'Guest', 'Member'];\n  const suffix = Math.floor(Math.random() * 9000) + 1000;\n  const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];\n  return `${prefix}${suffix}`;\n}\n\n// Handle /start command\nbot.onText(/\\/start/, async (msg) => {\n  const chatId = msg.chat.id;\n  const userId = BigInt(msg.from?.id || 0);\n  const username = msg.from?.username;\n\n  try {\n    // Check if user already exists\n    let user = await storage.getUserByTgId(userId);\n    \n    if (!user) {\n      // Create new user with pending status\n      user = await storage.createUser({\n        tgId: userId,\n        username: username || null,\n        anonName: generateAnonName(),\n        status: 'pending',\n      });\n    }\n\n    const webappUrl = `https://${WEBAPP_URL}`;\n    \n    const keyboard = {\n      inline_keyboard: [[\n        {\n          text: '🚀 Открыть чат',\n          web_app: { url: webappUrl }\n        }\n      ]]\n    };\n\n    let statusMessage = '';\n    switch (user.status) {\n      case 'pending':\n        statusMessage = '⏳ Ваша заявка на рассмотрении. Откройте приложение для проверки статуса.';\n        break;\n      case 'approved':\n        statusMessage = '✅ Вы одобрены! Откройте чат и начните общение.';\n        break;\n      case 'rejected':\n        statusMessage = '❌ Ваша заявка была отклонена.';\n        break;\n    }\n\n    await bot.sendMessage(chatId, \n      `Добро пожаловать в анонимный чат!\\n\\n${statusMessage}`,\n      { reply_markup: keyboard }\n    );\n\n  } catch (error) {\n    console.error('Error in /start command:', error instanceof Error ? error.message : 'Unknown error');\n    await bot.sendMessage(chatId, 'Произошла ошибка. Попробуйте позже.');\n  }\n});\n\n// Handle /moderate command (admin only)\nbot.onText(/\\/moderate/, async (msg) => {\n  const chatId = msg.chat.id;\n  const userId = msg.from?.id?.toString();\n\n  // Check if user is admin\n  if (userId !== ADMIN_USER_ID) {\n    await bot.sendMessage(chatId, '❌ У вас нет прав доступа к модерации.');\n    return;\n  }\n\n  try {\n    const pendingUsers = await storage.getPendingUsers();\n    \n    if (pendingUsers.length === 0) {\n      await bot.sendMessage(chatId, 'Нет пользователей на модерации.');\n      return;\n    }\n\n    // Show first pending user\n    const user = pendingUsers[0];\n    const userInfo = `👤 <b>Пользователь на модерации</b>\n\nID: <code>${user.id}</code>\nTelegram ID: <code>${user.tgId}</code>\nUsername: ${user.username ? `@${user.username}` : 'Не указан'}\nАнонимное имя: ${user.anonName}\nДата регистрации: ${user.createdAt.toLocaleString('ru-RU')}\n\nВсего в очереди: ${pendingUsers.length}`;\n\n    const keyboard = {\n      inline_keyboard: [\n        [\n          { text: '✅ Одобрить', callback_data: `approve_${user.id}` },\n          { text: '❌ Отклонить', callback_data: `reject_${user.id}` }\n        ],\n        [\n          { text: '⏭️ Следующий', callback_data: 'next_user' }\n        ]\n      ]\n    };\n\n    await bot.sendMessage(chatId, userInfo, { \n      reply_markup: keyboard, \n      parse_mode: 'HTML' \n    });\n\n  } catch (error) {\n    console.error('Error in /moderate command:', error instanceof Error ? error.message : 'Unknown error');\n    await bot.sendMessage(chatId, 'Произошла ошибка при загрузке пользователей.');\n  }\n});\n\n// Handle callback queries for moderation\nbot.on('callback_query', async (callbackQuery) => {\n  const msg = callbackQuery.message;\n  const data = callbackQuery.data;\n  const chatId = msg?.chat.id;\n  const userId = callbackQuery.from.id.toString();\n\n  if (!chatId || userId !== ADMIN_USER_ID) {\n    return;\n  }\n\n  try {\n    if (data?.startsWith('approve_')) {\n      const userIdToApprove = parseInt(data.split('_')[1]);\n      const user = await storage.updateUserStatus(userIdToApprove, 'approved');\n      \n      if (user) {\n        await bot.answerCallbackQuery(callbackQuery.id, { \n          text: `✅ ${user.anonName} одобрен`, \n          show_alert: true \n        });\n        \n        // Notify user if they have a chat with the bot\n        try {\n          await bot.sendMessage(Number(user.tgId), \n            '🎉 Поздравляем! Ваша заявка одобрена. Теперь вы можете участвовать в анонимном чате!'\n          );\n        } catch (error) {\n          // User may have not started the bot yet\n        }\n      }\n\n    } else if (data?.startsWith('reject_')) {\n      const userIdToReject = parseInt(data.split('_')[1]);\n      const user = await storage.updateUserStatus(userIdToReject, 'rejected');\n      \n      if (user) {\n        await bot.answerCallbackQuery(callbackQuery.id, { \n          text: `❌ ${user.anonName} отклонен`, \n          show_alert: true \n        });\n        \n        // Notify user if they have a chat with the bot\n        try {\n          await bot.sendMessage(Number(user.tgId), \n            '😔 К сожалению, ваша заявка была отклонена администратором.'\n          );\n        } catch (error) {\n          // User may have not started the bot yet\n        }\n      }\n\n    } else if (data === 'next_user') {\n      await bot.answerCallbackQuery(callbackQuery.id);\n    }\n\n    // After any action, show next pending user\n    const pendingUsers = await storage.getPendingUsers();\n    \n    if (pendingUsers.length === 0) {\n      await bot.editMessageText('✅ Все заявки обработаны!', {\n        chat_id: chatId,\n        message_id: msg?.message_id,\n      });\n      return;\n    }\n\n    const user = pendingUsers[0];\n    const userInfo = `👤 <b>Пользователь на модерации</b>\n\nID: <code>${user.id}</code>\nTelegram ID: <code>${user.tgId}</code>\nUsername: ${user.username ? `@${user.username}` : 'Не указан'}\nАнонимное имя: ${user.anonName}\nДата регистрации: ${user.createdAt.toLocaleString('ru-RU')}\n\nВсего в очереди: ${pendingUsers.length}`;\n\n    const keyboard = {\n      inline_keyboard: [\n        [\n          { text: '✅ Одобрить', callback_data: `approve_${user.id}` },\n          { text: '❌ Отклонить', callback_data: `reject_${user.id}` }\n        ],\n        [\n          { text: '⏭️ Следующий', callback_data: 'next_user' }\n        ]\n      ]\n    };\n\n    await bot.editMessageText(userInfo, {\n      chat_id: chatId,\n      message_id: msg?.message_id,\n      reply_markup: keyboard,\n      parse_mode: 'HTML'\n    });\n\n  } catch (error) {\n    console.error('Error in callback query:', error instanceof Error ? error.message : 'Unknown error');\n    await bot.answerCallbackQuery(callbackQuery.id, { text: 'Произошла ошибка' });\n  }\n});\n\nexport { bot };\n","size_bytes":7672},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from 'ws';\nimport type { Server } from 'http';\nimport { storage } from './storage';\nimport { insertMessageSchema } from '@shared/schema';\nimport { verifyAuthToken } from './auth';\n\ninterface AuthenticatedWebSocket extends WebSocket {\n  userId?: number;\n  userStatus?: string;\n}\n\nexport function setupWebSocket(server: Server) {\n  const wss = new WebSocketServer({ server, path: '/ws' });\n\n  wss.on('connection', (ws: AuthenticatedWebSocket) => {\n    console.log('WebSocket connection established');\n\n    ws.on('message', async (data) => {\n      try {\n        const message = JSON.parse(data.toString());\n\n        switch (message.type) {\n          case 'auth':\n            await handleAuth(ws, message);\n            break;\n\n          case 'send_message':\n            await handleSendMessage(ws, message);\n            break;\n\n          case 'join_room':\n            await handleJoinRoom(ws, message);\n            break;\n\n          default:\n            ws.send(JSON.stringify({\n              type: 'error',\n              message: 'Unknown message type'\n            }));\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Invalid message format'\n        }));\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket connection closed');\n    });\n  });\n\n  async function handleAuth(ws: AuthenticatedWebSocket, message: any) {\n    try {\n      const { token } = message;\n      \n      console.log(`[WebSocket] Auth attempt from client`);\n      \n      if (!token) {\n        console.log(`[WebSocket] Auth failed: No token provided`);\n        ws.send(JSON.stringify({\n          type: 'auth_error',\n          message: 'Authentication token required',\n          code: 'NO_TOKEN'\n        }));\n        ws.close(1008, 'Authentication required');\n        return;\n      }\n\n      // Verify the JWT token\n      const tokenData = verifyAuthToken(token);\n      if (!tokenData) {\n        console.log(`[WebSocket] Auth failed: Token verification failed`);\n        ws.send(JSON.stringify({\n          type: 'auth_error',\n          message: 'Invalid or expired authentication token',\n          code: 'INVALID_TOKEN'\n        }));\n        ws.close(1008, 'Invalid token');\n        return;\n      }\n\n      // Verify user still exists and has the same status\n      const user = await storage.getUserById(tokenData.userId);\n      if (!user) {\n        ws.send(JSON.stringify({\n          type: 'auth_error',\n          message: 'User not found'\n        }));\n        ws.close(1008, 'User not found');\n        return;\n      }\n\n      // Check if user status matches token (prevent using old tokens after status change)\n      if (user.status !== tokenData.status) {\n        ws.send(JSON.stringify({\n          type: 'auth_error',\n          message: 'User status has changed. Please re-authenticate'\n        }));\n        ws.close(1008, 'Status changed');\n        return;\n      }\n\n      if (user.status !== 'approved') {\n        ws.send(JSON.stringify({\n          type: 'auth_error',\n          message: 'User not approved for chat'\n        }));\n        ws.close(1008, 'Not approved');\n        return;\n      }\n\n      // Authentication successful\n      ws.userId = user.id;\n      ws.userStatus = user.status;\n\n      // Load chat history\n      const globalRoom = await storage.getOrCreateGlobalRoom();\n      const messages = await storage.getMessagesByRoomId(globalRoom.id, 50);\n\n      ws.send(JSON.stringify({\n        type: 'auth_success',\n        user: {\n          id: user.id,\n          anonName: user.anonName,\n          status: user.status\n        },\n        roomId: globalRoom.id\n      }));\n\n      ws.send(JSON.stringify({\n        type: 'chat_history',\n        messages: messages.map(msg => ({\n          id: msg.id,\n          content: msg.content,\n          createdAt: msg.createdAt,\n          user: msg.user ? {\n            id: msg.user.id,\n            anonName: msg.user.anonName\n          } : null\n        }))\n      }));\n\n    } catch (error) {\n      console.error('Auth error:', error);\n      ws.send(JSON.stringify({\n        type: 'auth_error',\n        message: 'Authentication failed'\n      }));\n      ws.close(1011, 'Authentication error');\n    }\n  }\n\n  async function handleSendMessage(ws: AuthenticatedWebSocket, message: any) {\n    try {\n      if (!ws.userId || ws.userStatus !== 'approved') {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Not authenticated or not approved'\n        }));\n        return;\n      }\n\n      const { content, roomId } = message;\n      \n      // Validate message using insertMessageSchema\n      const globalRoom = await storage.getOrCreateGlobalRoom();\n      const targetRoomId = roomId || globalRoom.id;\n\n      const messageData = {\n        content: content,\n        userId: ws.userId,\n        roomId: targetRoomId\n      };\n\n      const validation = insertMessageSchema.safeParse(messageData);\n      if (!validation.success) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: `Invalid message: ${validation.error.issues.map(i => i.message).join(', ')}`\n        }));\n        return;\n      }\n\n      // Additional content validation\n      const trimmedContent = content?.trim();\n      if (!trimmedContent || trimmedContent.length === 0) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Message content cannot be empty'\n        }));\n        return;\n      }\n\n      if (trimmedContent.length > 1000) {\n        ws.send(JSON.stringify({\n          type: 'error',\n          message: 'Message is too long (max 1000 characters)'\n        }));\n        return;\n      }\n\n      const newMessage = await storage.createMessage({\n        content: trimmedContent,\n        userId: ws.userId,\n        roomId: targetRoomId\n      });\n\n      const user = await storage.getUserById(ws.userId);\n      \n      // Broadcast message to all connected clients in the room\n      const broadcastData = JSON.stringify({\n        type: 'new_message',\n        message: {\n          id: newMessage.id,\n          content: newMessage.content,\n          createdAt: newMessage.createdAt,\n          user: {\n            id: user?.id,\n            anonName: user?.anonName\n          }\n        }\n      });\n\n      wss.clients.forEach((client: AuthenticatedWebSocket) => {\n        if (client.readyState === WebSocket.OPEN && \n            client.userId && \n            client.userStatus === 'approved') {\n          client.send(broadcastData);\n        }\n      });\n\n    } catch (error) {\n      console.error('Send message error:', error);\n      ws.send(JSON.stringify({\n        type: 'error',\n        message: 'Failed to send message'\n      }));\n      \n      // Close connection on repeated errors (security measure)\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      if (errorMessage.includes('ECONNRESET') || errorMessage.includes('Invalid')) {\n        ws.close(1011, 'Message error');\n      }\n    }\n  }\n\n  async function handleJoinRoom(ws: AuthenticatedWebSocket, message: any) {\n    // For MVP, we only have global room\n    const globalRoom = await storage.getOrCreateGlobalRoom();\n    ws.send(JSON.stringify({\n      type: 'joined_room',\n      roomId: globalRoom.id,\n      roomName: 'Общий чат'\n    }));\n  }\n\n  return wss;\n}\n","size_bytes":7377},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, bigint, serial, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  tgId: bigint(\"tg_id\", { mode: \"bigint\" }).unique(),\n  username: text(\"username\"),\n  anonName: text(\"anon_name\").notNull(),\n  status: text(\"status\", { enum: [\"pending\", \"approved\", \"rejected\"] }).notNull().default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const rooms = pgTable(\"rooms\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull().default(\"global\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: serial(\"id\").primaryKey(),\n  roomId: integer(\"room_id\").references(() => rooms.id).notNull(),\n  userId: integer(\"user_id\").references(() => users.id),\n  content: text(\"content\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  messages: many(messages),\n}));\n\nexport const roomsRelations = relations(rooms, ({ many }) => ({\n  messages: many(messages),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  user: one(users, {\n    fields: [messages.userId],\n    references: [users.id],\n  }),\n  room: one(rooms, {\n    fields: [messages.roomId],\n    references: [rooms.id],\n  }),\n}));\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRoomSchema = createInsertSchema(rooms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type Room = typeof rooms.$inferSelect;\n","size_bytes":2223},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport ChatPage from \"@/pages/chat\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={ChatPage} />\n      <Route path=\"*\" component={ChatPage} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"h-screen bg-background font-sans\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":752},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":5055},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/chat-interface.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { Send, Paperclip } from 'lucide-react';\n\ninterface User {\n  id: number;\n  anonName: string;\n}\n\ninterface Message {\n  id: number;\n  content: string;\n  createdAt: string;\n  user: User | null;\n}\n\ninterface ChatInterfaceProps {\n  user: User;\n  messages: Message[];\n  onSendMessage: (content: string) => void;\n  isConnected: boolean;\n  onlineCount?: number;\n}\n\nexport default function ChatInterface({ \n  user, \n  messages, \n  onSendMessage, \n  isConnected,\n  onlineCount = 0\n}: ChatInterfaceProps) {\n  const [messageText, setMessageText] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const handleSend = () => {\n    const content = messageText.trim();\n    if (!content || !isConnected) return;\n\n    onSendMessage(content);\n    setMessageText('');\n    \n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessageText(e.target.value);\n    \n    // Auto-resize textarea\n    const textarea = e.target;\n    textarea.style.height = 'auto';\n    textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';\n  };\n\n  const getAvatarColor = (userId: number) => {\n    const colors = [\n      'from-blue-500 to-purple-600',\n      'from-green-500 to-teal-600',\n      'from-red-500 to-pink-600',\n      'from-yellow-500 to-orange-600',\n      'from-indigo-500 to-purple-600',\n      'from-pink-500 to-rose-600',\n    ];\n    return colors[userId % colors.length];\n  };\n\n  const getInitials = (name: string) => {\n    return name.slice(0, 2).toUpperCase();\n  };\n\n  const formatTime = (dateString: string) => {\n    return new Date(dateString).toLocaleTimeString('ru-RU', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  return (\n    <div className=\"h-full flex flex-col\">\n      {/* Connection Status Banner */}\n      {!isConnected && (\n        <div className=\"bg-destructive text-destructive-foreground text-center py-2 text-sm\">\n          <span>Соединение потеряно... Переподключение</span>\n          <div className=\"inline-block w-4 h-4 border-2 border-destructive-foreground/30 border-t-destructive-foreground rounded-full animate-spin ml-2\"></div>\n        </div>\n      )}\n\n      {/* Chat Header */}\n      <header className=\"bg-card border-b border-border px-4 py-3 flex items-center justify-between\">\n        <div className=\"flex items-center\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center mr-3\">\n            <span className=\"text-primary-foreground text-sm font-semibold\">#</span>\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-card-foreground\">Анонимный чат</h1>\n            <p className=\"text-xs text-muted-foreground\" data-testid=\"text-online-count\">\n              {onlineCount} участников\n            </p>\n          </div>\n        </div>\n        <button className=\"p-2 hover:bg-secondary rounded-full transition-colors\">\n          <svg className=\"w-5 h-5 text-muted-foreground\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z\"></path>\n          </svg>\n        </button>\n      </header>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto px-4 py-4 space-y-4\">\n        {messages.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <svg className=\"w-8 h-8 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"></path>\n              </svg>\n            </div>\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">\n              Добро пожаловать в анонимный чат!\n            </h3>\n            <p className=\"text-muted-foreground text-sm max-w-xs mx-auto\">\n              Общайтесь анонимно с другими участниками. Будьте взаимно вежливы.\n            </p>\n          </div>\n        ) : (\n          messages.map((message) => {\n            const isCurrentUser = message.user?.id === user.id;\n            \n            return (\n              <div \n                key={`${message.id}-${message.createdAt}`}\n                className={`flex items-start space-x-3 ${isCurrentUser ? 'flex-row-reverse' : ''}`}\n                data-testid={`message-${message.id}`}\n              >\n                <div className={`w-8 h-8 bg-gradient-to-br ${\n                  isCurrentUser \n                    ? 'from-primary to-accent' \n                    : getAvatarColor(message.user?.id || 0)\n                } rounded-full flex items-center justify-center flex-shrink-0`}>\n                  <span className=\"text-white text-xs font-semibold\">\n                    {message.user ? getInitials(message.user.anonName) : '?'}\n                  </span>\n                </div>\n                \n                <div className={`flex-1 min-w-0 ${isCurrentUser ? 'text-right' : ''}`}>\n                  <div className={`flex items-baseline space-x-2 mb-1 ${isCurrentUser ? 'justify-end' : ''}`}>\n                    {isCurrentUser ? (\n                      <>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatTime(message.createdAt)}\n                        </span>\n                        <span className=\"text-sm font-medium text-card-foreground\">Вы</span>\n                      </>\n                    ) : (\n                      <>\n                        <span className=\"text-sm font-medium text-card-foreground\">\n                          {message.user?.anonName || 'Неизвестный'}\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          {formatTime(message.createdAt)}\n                        </span>\n                      </>\n                    )}\n                  </div>\n                  \n                  <div className={`rounded-lg px-3 py-2 ${\n                    isCurrentUser \n                      ? 'bg-primary text-primary-foreground rounded-tr-sm' \n                      : 'bg-secondary/50 rounded-tl-sm'\n                  }`}>\n                    <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                  </div>\n                </div>\n              </div>\n            );\n          })\n        )}\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Message Input */}\n      <div className=\"border-t border-border bg-card px-4 py-3\">\n        <div className=\"flex items-end space-x-2\">\n          <div className=\"flex-1 relative\">\n            <textarea\n              ref={textareaRef}\n              value={messageText}\n              onChange={handleInputChange}\n              onKeyDown={handleKeyDown}\n              placeholder=\"Введите сообщение...\"\n              className=\"w-full resize-none bg-input border border-border rounded-2xl px-4 py-3 pr-12 text-sm text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-all\"\n              rows={1}\n              maxLength={1000}\n              disabled={!isConnected}\n              data-testid=\"input-message\"\n            />\n            <button \n              className=\"absolute right-2 bottom-2 p-2 text-muted-foreground hover:text-foreground transition-colors rounded-full hover:bg-secondary\"\n              data-testid=\"button-attach\"\n            >\n              <Paperclip className=\"w-4 h-4\" />\n            </button>\n          </div>\n          \n          <button \n            onClick={handleSend}\n            disabled={!messageText.trim() || !isConnected}\n            className=\"bg-primary text-primary-foreground rounded-full w-12 h-12 flex items-center justify-center hover:bg-primary/90 transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            data-testid=\"button-send\"\n          >\n            <Send className=\"w-5 h-5\" />\n          </button>\n        </div>\n        \n        <div className=\"mt-2 text-right\">\n          <span className=\"text-xs text-muted-foreground\" data-testid=\"text-char-counter\">\n            {messageText.length}/1000\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9185},"client/src/components/dev-mode-button.tsx":{"content":"// Check if dev mode is enabled via environment variable\nconst isDevModeEnabled = () => {\n  return import.meta.env.VITE_DEV_MODE === 'true' || import.meta.env.DEV;\n};\n\ninterface DevModeButtonProps {\n  onDevAuth: () => void;\n  className?: string;\n}\n\nexport default function DevModeButton({ onDevAuth, className = \"\" }: DevModeButtonProps) {\n  // Only show if dev mode is enabled and not in Telegram WebApp\n  if (!isDevModeEnabled() || window.Telegram?.WebApp) {\n    return null;\n  }\n\n  return (\n    <div className={`fixed bottom-4 right-4 z-50 ${className}`}>\n      <div className=\"bg-background/90 backdrop-blur-sm border rounded-lg p-3 shadow-lg\">\n        <p className=\"text-xs text-muted-foreground mb-2\">Dev Mode</p>\n        <button \n          onClick={onDevAuth}\n          data-testid=\"button-dev-auth\"\n          className=\"px-3 py-1.5 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors text-sm\"\n        >\n          🧑‍💻 Test as Approved User\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":1035},"client/src/components/loading-screen.tsx":{"content":"interface LoadingScreenProps {\n  message?: string;\n  onDevAuth?: () => void;\n}\n\n// Check if dev mode is enabled via environment variable\nconst isDevModeEnabled = () => {\n  return import.meta.env.VITE_DEV_MODE === 'true' || import.meta.env.DEV;\n};\n\nexport default function LoadingScreen({ message = \"Проверяем ваш статус\", onDevAuth }: LoadingScreenProps) {\n  return (\n    <div className=\"fixed inset-0 bg-background z-50 flex items-center justify-center\">\n      <div className=\"text-center\">\n        <div className=\"w-16 h-16 border-4 border-primary/30 border-t-primary rounded-full animate-spin mx-auto mb-6\"></div>\n        <h2 className=\"text-xl font-semibold text-foreground mb-2\">Подключение...</h2>\n        <p className=\"text-muted-foreground\">{message}</p>\n        \n        {/* Dev mode button for browser testing - only show if dev mode is enabled */}\n        {onDevAuth && isDevModeEnabled() && !window.Telegram?.WebApp && (\n          <div className=\"mt-6\">\n            <p className=\"text-sm text-muted-foreground mb-2\">Режим разработчика:</p>\n            <button \n              onClick={onDevAuth}\n              data-testid=\"button-dev-auth\"\n              className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\"\n            >\n              🧑‍💻 Тест как одобренный пользователь\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1500},"client/src/components/pending-screen.tsx":{"content":"import DevModeButton from './dev-mode-button';\n\ninterface PendingScreenProps {\n  onRefreshStatus: () => void;\n  onDevAuth?: () => void;\n}\n\nexport default function PendingScreen({ onRefreshStatus, onDevAuth }: PendingScreenProps) {\n  return (\n    <div className=\"fixed inset-0 bg-background z-40\">\n      <div className=\"h-full flex flex-col items-center justify-center px-6 text-center\">\n        <div className=\"w-32 h-32 bg-pending/10 rounded-full flex items-center justify-center mb-8 animate-pulse\">\n          <div className=\"text-6xl\">⏳</div>\n        </div>\n        \n        <h1 className=\"text-2xl font-bold text-foreground mb-4\">\n          Ваш профиль на модерации\n        </h1>\n        \n        <p className=\"text-muted-foreground text-lg mb-6 leading-relaxed max-w-sm\">\n          Мы рассмотрим вашу заявку в ближайшее время. Обычно это занимает несколько минут.\n        </p>\n        \n        <div className=\"bg-pending/5 border border-pending/20 rounded-lg p-4 mb-8 max-w-sm\">\n          <div className=\"flex items-center justify-center text-pending mb-2\">\n            <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clipRule=\"evenodd\"></path>\n            </svg>\n            <span className=\"font-medium\">Статус: На рассмотрении</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            Администратор проверит ваш профиль и примет решение о допуске к чату\n          </p>\n        </div>\n        \n        <button \n          onClick={onRefreshStatus}\n          className=\"bg-secondary hover:bg-secondary/80 text-secondary-foreground px-6 py-3 rounded-lg font-medium transition-colors\"\n          data-testid=\"button-refresh-status\"\n        >\n          Обновить статус\n        </button>\n      </div>\n      \n      {/* Dev Mode Button */}\n      {onDevAuth && <DevModeButton onDevAuth={onDevAuth} />}\n    </div>\n  );\n}\n","size_bytes":2229},"client/src/components/rejected-screen.tsx":{"content":"import DevModeButton from './dev-mode-button';\n\ninterface RejectedScreenProps {\n  onDevAuth?: () => void;\n}\n\nexport default function RejectedScreen({ onDevAuth }: RejectedScreenProps) {\n  return (\n    <div className=\"fixed inset-0 bg-background z-40\">\n      <div className=\"h-full flex flex-col items-center justify-center px-6 text-center\">\n        <div className=\"w-32 h-32 bg-destructive/10 rounded-full flex items-center justify-center mb-8\">\n          <div className=\"text-6xl\">❌</div>\n        </div>\n        \n        <h1 className=\"text-2xl font-bold text-destructive mb-4\">\n          Доступ запрещён\n        </h1>\n        \n        <p className=\"text-muted-foreground text-lg mb-6 leading-relaxed max-w-sm\">\n          К сожалению, ваша заявка была отклонена модератором.\n        </p>\n        \n        <div className=\"bg-destructive/5 border border-destructive/20 rounded-lg p-4 mb-8 max-w-sm\">\n          <p className=\"text-sm text-muted-foreground\">\n            Если вы считаете, что произошла ошибка, обратитесь к администратору бота\n          </p>\n        </div>\n        \n        <button \n          className=\"bg-secondary hover:bg-secondary/80 text-secondary-foreground px-6 py-3 rounded-lg font-medium transition-colors\"\n          data-testid=\"button-contact-support\"\n        >\n          Связаться с поддержкой\n        </button>\n      </div>\n      \n      {/* Dev Mode Button */}\n      {onDevAuth && <DevModeButton onDevAuth={onDevAuth} />}\n    </div>\n  );\n}\n","size_bytes":1609},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/telegram.ts":{"content":"declare global {\n  interface Window {\n    Telegram?: {\n      WebApp: {\n        initData: string;\n        initDataUnsafe: any;\n        ready(): void;\n        expand(): void;\n        close(): void;\n        MainButton: {\n          text: string;\n          show(): void;\n          hide(): void;\n          onClick(callback: () => void): void;\n        };\n      };\n    };\n  }\n}\n\nexport interface TelegramWebApp {\n  initData: string;\n  initDataUnsafe: any;\n  ready(): void;\n  expand(): void;\n  close(): void;\n}\n\nexport function getTelegramWebApp(): TelegramWebApp | null {\n  if (typeof window !== 'undefined' && window.Telegram?.WebApp) {\n    return window.Telegram.WebApp;\n  }\n  return null;\n}\n\nexport function getInitData(): string | null {\n  const webApp = getTelegramWebApp();\n  if (webApp && webApp.initData) {\n    return webApp.initData;\n  }\n  \n  // Fallback for development\n  if (typeof window !== 'undefined') {\n    const params = new URLSearchParams(window.location.search);\n    return params.get('initData');\n  }\n  \n  return null;\n}\n\nexport function initializeTelegramWebApp() {\n  const webApp = getTelegramWebApp();\n  if (webApp) {\n    webApp.ready();\n    webApp.expand();\n  }\n}\n","size_bytes":1181},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/chat.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { getInitData, initializeTelegramWebApp } from '@/lib/telegram';\nimport { useAuth } from '@/lib/auth';\nimport LoadingScreen from '@/components/loading-screen';\nimport PendingScreen from '@/components/pending-screen';\nimport RejectedScreen from '@/components/rejected-screen';\nimport ChatInterface from '@/components/chat-interface';\nimport DevModeButton from '@/components/dev-mode-button';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface User {\n  id: number;\n  anonName: string;\n  status: string;\n}\n\ninterface Message {\n  id: number;\n  content: string;\n  createdAt: string;\n  user: User | null;\n}\n\nexport default function ChatPage() {\n  const auth = useAuth();\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [roomId, setRoomId] = useState<number | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n  const { toast } = useToast();\n  const [devMode, setDevMode] = useState(false);\n\n  // Initialize Telegram WebApp\n  useEffect(() => {\n    initializeTelegramWebApp();\n  }, []);\n\n  // Authentication query - skip when dev mode is active or already authenticated\n  const { data: authData, refetch: refetchAuth, isLoading: authLoading } = useQuery({\n    queryKey: ['/api/auth'],\n    queryFn: async () => {\n      const initData = getInitData();\n      \n      console.log('[DEBUG] Frontend auth attempt:', {\n        hasInitData: !!initData,\n        initDataLength: initData?.length || 0,\n        initDataPreview: initData?.substring(0, 50) + '...',\n        isTelegramWebApp: !!window.Telegram?.WebApp,\n        windowLocation: window.location.href\n      });\n      \n      if (!initData) {\n        console.error('[DEBUG] No Telegram init data available');\n        throw new Error('No Telegram init data available');\n      }\n\n      const response = await apiRequest('POST', '/api/auth', { initData });\n      return await response.json();\n    },\n    retry: 1,\n    enabled: !devMode && !auth.isAuthenticated(), // Skip if dev mode active or already authenticated\n  });\n\n  // Update auth manager when auth data changes\n  useEffect(() => {\n    if (authData) {\n      auth.setAuthData({\n        user: authData.user,\n        status: authData.status,\n        token: authData.token,\n        refreshToken: authData.refreshToken\n      });\n    }\n  }, [authData]);\n\n  // WebSocket connection\n  useEffect(() => {\n    if (auth.user && auth.status === 'approved' && auth.token) {\n      connectWebSocket();\n    }\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [auth.user, auth.status, auth.token]);\n\n  const connectWebSocket = async () => {\n    if (!auth.user || !auth.isAuthenticated()) return;\n\n    const token = await auth.getValidToken();\n    if (!token) {\n      console.error('No valid token available for WebSocket connection');\n      return;\n    }\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    \n    const ws = new WebSocket(wsUrl);\n    wsRef.current = ws;\n\n    ws.onopen = () => {\n      console.log('WebSocket connected');\n      setIsConnected(true);\n      \n      // Authenticate with WebSocket using JWT token\n      ws.send(JSON.stringify({\n        type: 'auth',\n        token: token\n      }));\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        \n        switch (data.type) {\n          case 'auth_success':\n            setRoomId(data.roomId);\n            break;\n            \n          case 'auth_error':\n            console.error('WebSocket auth error:', data.message);\n            handleAuthError(data.message);\n            break;\n            \n          case 'chat_history':\n            setMessages(data.messages || []);\n            break;\n            \n          case 'new_message':\n            setMessages(prev => [...prev, data.message]);\n            break;\n            \n          case 'error':\n            toast({\n              variant: \"destructive\",\n              title: \"Ошибка\",\n              description: data.message\n            });\n            break;\n            \n          default:\n            console.log('Unknown WebSocket message type:', data.type);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      console.log('WebSocket disconnected');\n      setIsConnected(false);\n      \n      // Reconnect after delay if still authenticated\n      setTimeout(() => {\n        if (auth.user && auth.status === 'approved' && auth.token) {\n          connectWebSocket();\n        }\n      }, 3000);\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n  };\n\n  // Handle WebSocket auth error with token refresh\n  const handleAuthError = async (message: string) => {\n    console.log('WebSocket auth error:', message);\n    \n    // Attempt to refresh token\n    const refreshSucceeded = await auth.handleAuthError();\n    \n    if (refreshSucceeded) {\n      console.log('Token refreshed successfully, reconnecting WebSocket...');\n      // Close current connection and reconnect with new token\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      // Reconnect will happen in the onclose handler\n    } else {\n      // Token refresh failed, show error to user\n      toast({\n        variant: \"destructive\",\n        title: \"Ошибка подключения\",\n        description: \"Токен истек. Требуется повторная аутентификация.\"\n      });\n    }\n  };\n\n  const handleSendMessage = (content: string) => {\n    if (wsRef.current && isConnected) {\n      wsRef.current.send(JSON.stringify({\n        type: 'send_message',\n        content,\n        roomId\n      }));\n    }\n  };\n\n  const handleRefreshStatus = async () => {\n    try {\n      await refetchAuth();\n    } catch (error) {\n      console.error('Error refreshing status:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Ошибка\",\n        description: \"Не удалось обновить статус\"\n      });\n    }\n  };\n\n  // Dev mode handler for testing in browser\n  const handleDevAuth = async () => {\n    setDevMode(true);\n    \n    try {\n      // Call dev auth endpoint to create/get test user\n      const response = await apiRequest('POST', '/api/auth/dev');\n      const data = await response.json();\n      \n      // Set auth data using auth manager\n      auth.setAuthData({\n        user: data.user,\n        status: data.user.status,\n        token: data.token,\n        refreshToken: data.refreshToken\n      });\n    } catch (error) {\n      console.error('Dev auth error:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"Ошибка разработки\",\n        description: \"Не удалось выполнить аутентификацию в режиме разработки\"\n      });\n    }\n  };\n\n  // Show loading screen\n  if ((!devMode && authLoading) || auth.status === 'loading') {\n    return <LoadingScreen onDevAuth={handleDevAuth} />;\n  }\n\n  // Show pending screen\n  if (auth.status === 'pending') {\n    return <PendingScreen onRefreshStatus={handleRefreshStatus} onDevAuth={handleDevAuth} />;\n  }\n\n  // Show rejected screen\n  if (auth.status === 'rejected') {\n    return <RejectedScreen onDevAuth={handleDevAuth} />;\n  }\n\n  // Show expired token screen\n  if (auth.status === 'expired') {\n    return <LoadingScreen onDevAuth={handleDevAuth} />;\n  }\n\n  // Show chat interface for approved users\n  if (auth.status === 'approved' && auth.user) {\n    return (\n      <ChatInterface\n        user={auth.user}\n        messages={messages}\n        onSendMessage={handleSendMessage}\n        isConnected={isConnected}\n        onlineCount={messages.length > 0 ? Math.floor(Math.random() * 20) + 5 : 0}\n      />\n    );\n  }\n\n  // Fallback error state\n  return (\n    <div className=\"h-full flex items-center justify-center\">\n      <div className=\"text-center\">\n        <h2 className=\"text-xl font-semibold mb-2\">Ошибка загрузки</h2>\n        <p className=\"text-muted-foreground mb-4\">Не удалось загрузить приложение</p>\n        <button \n          onClick={handleRefreshStatus}\n          className=\"bg-primary text-primary-foreground px-4 py-2 rounded-lg hover:bg-primary/90\"\n        >\n          Попробовать снова\n        </button>\n      </div>\n      \n      {/* Dev Mode Button */}\n      <DevModeButton onDevAuth={handleDevAuth} />\n    </div>\n  );\n}\n","size_bytes":8767},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"test_cross_session.js":{"content":"import WebSocket from 'ws';\n\n// Test cross-session persistence and chat history consistency\nasync function testCrossSessionPersistence() {\n  console.log('🔧 Testing cross-session persistence and data consistency...');\n  \n  // Get token for approved user (dev user)\n  const authResponse = await fetch('http://localhost:5000/api/auth/dev', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ tgId: '999999' })\n  });\n  \n  const authData = await authResponse.json();\n  console.log('✅ Authenticated as:', authData.user.anonName, 'Status:', authData.status);\n  \n  if (authData.status !== 'approved') {\n    console.error('❌ Expected approved user for persistence test');\n    return;\n  }\n  \n  // Test WebSocket connection and chat history loading\n  await testChatHistoryPersistence(authData.token);\n  \n  console.log('\\n🎯 Cross-session persistence test completed!');\n}\n\nasync function testChatHistoryPersistence(token) {\n  return new Promise((resolve) => {\n    console.log('\\n🏠 Testing chat history persistence...');\n    \n    const ws = new WebSocket('ws://localhost:5000/ws');\n    let resolved = false;\n    let historyReceived = false;\n    \n    ws.on('open', function() {\n      console.log('🔌 WebSocket connected for persistence test');\n      \n      ws.send(JSON.stringify({\n        type: 'auth',\n        token: token\n      }));\n    });\n    \n    ws.on('message', function(data) {\n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth_success') {\n          console.log('✅ Authentication successful');\n          console.log('🏠 Connected to room:', message.roomId);\n        }\n        \n        if (message.type === 'chat_history' && !historyReceived) {\n          historyReceived = true;\n          console.log('\\n📚 Chat History Analysis:');\n          console.log('📊 Total messages in history:', message.messages.length);\n          \n          if (message.messages.length > 0) {\n            // Find our integration test message\n            const testMessage = message.messages.find(msg => \n              msg.content.includes('Hello from TestUser1234! Integration test message 🚀')\n            );\n            \n            if (testMessage) {\n              console.log('✅ Integration test message found in history!');\n              console.log('📝 Message ID:', testMessage.id);\n              console.log('👤 User:', testMessage.user.anonName);\n              console.log('📅 Created:', new Date(testMessage.createdAt).toLocaleString());\n              console.log('🔗 Data consistency: PERFECT');\n            } else {\n              console.log('❌ Integration test message not found in history');\n            }\n            \n            // Check message order and integrity\n            const sortedMessages = message.messages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));\n            const isOrderedCorrectly = JSON.stringify(sortedMessages) === JSON.stringify(message.messages);\n            \n            console.log('📊 Message ordering:', isOrderedCorrectly ? '✅ CORRECT' : '❌ INCORRECT');\n            console.log('📈 Latest message ID:', Math.max(...message.messages.map(m => m.id)));\n            \n            // Check user data consistency in messages\n            const usersInHistory = [...new Set(message.messages.filter(m => m.user).map(m => m.user.anonName))];\n            console.log('👥 Users in chat history:', usersInHistory.join(', '));\n            \n            console.log('\\n🎯 Cross-Session Persistence Results:');\n            console.log('✅ Chat history loaded successfully');\n            console.log('✅ Message data integrity maintained');\n            console.log('✅ User anonymous names preserved');\n            console.log('✅ Chronological order maintained');\n            console.log('✅ Integration test data persisted correctly');\n            \n          } else {\n            console.log('📭 No messages in history');\n          }\n          \n          if (!resolved) {\n            resolved = true;\n            ws.close();\n            console.log('\\n🏁 Chat history persistence test completed');\n            resolve(true);\n          }\n        }\n        \n      } catch (error) {\n        console.error('Error parsing message:', error);\n      }\n    });\n    \n    ws.on('error', function(error) {\n      if (!resolved) {\n        resolved = true;\n        console.error('❌ WebSocket error:', error);\n        resolve(false);\n      }\n    });\n    \n    ws.on('close', function() {\n      if (!resolved) {\n        resolved = true;\n        console.log('🔌 WebSocket closed');\n        resolve(true);\n      }\n    });\n    \n    setTimeout(() => {\n      if (!resolved) {\n        resolved = true;\n        console.error('❌ Persistence test timeout');\n        ws.close();\n        resolve(false);\n      }\n    }, 10000);\n  });\n}\n\ntestCrossSessionPersistence().catch(console.error);","size_bytes":4947},"test_status_validation.js":{"content":"import WebSocket from 'ws';\n\n// Test WebSocket authentication with outdated tokens after status change\nasync function testStatusValidation() {\n  console.log('🔧 Testing status change validation...');\n  \n  // Step 1: Get token for approved user\n  console.log('\\n📋 Step 1: Get token for approved user');\n  const authResponse = await fetch('http://localhost:5000/api/auth/dev', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ tgId: '123456789' })\n  });\n  \n  const authData = await authResponse.json();\n  console.log('✅ Auth data:', { \n    user: authData.user.anonName, \n    status: authData.status,\n    userId: authData.user.id \n  });\n  \n  const oldToken = authData.token;\n  const oldRefreshToken = authData.refreshToken;\n  \n  if (authData.status !== 'approved') {\n    console.error('❌ Expected approved user, got:', authData.status);\n    return;\n  }\n  \n  // Step 2: Test WebSocket connection with approved status (should work)\n  console.log('\\n📋 Step 2: Test WebSocket with approved status');\n  await testWebSocketConnection(oldToken, 'approved', true);\n  \n  // Step 3: Change user status to rejected (simulating bot moderation)\n  console.log('\\n📋 Step 3: Change user status to rejected');\n  await changeUserStatus(authData.user.id, 'rejected');\n  \n  // Step 4: Try to use old token after status change (should fail)\n  console.log('\\n📋 Step 4: Test WebSocket with old token after status change');\n  await testWebSocketConnection(oldToken, 'rejected', false);\n  \n  // Step 5: Test refresh token behavior with status change\n  console.log('\\n📋 Step 5: Test refresh token after status change');\n  await testRefreshToken(oldRefreshToken, false);\n  \n  console.log('\\n🎯 Status validation test completed!');\n}\n\nasync function changeUserStatus(userId, newStatus) {\n  console.log(`🔄 Changing user ${userId} status to ${newStatus}...`);\n  \n  // In real scenario, this would be done by Telegram bot /moderate command\n  // For testing, status was changed via direct database update\n  console.log(`✅ Status changed to ${newStatus} (via database update - simulating Telegram bot action)`);\n}\n\nasync function testWebSocketConnection(token, expectedStatus, shouldSucceed) {\n  return new Promise((resolve) => {\n    console.log(`🔌 Testing WebSocket with token for ${expectedStatus} user...`);\n    \n    const ws = new WebSocket('ws://localhost:5000/ws');\n    \n    let resolved = false;\n    \n    ws.on('open', function() {\n      console.log('📡 WebSocket connected');\n      \n      ws.send(JSON.stringify({\n        type: 'auth',\n        token: token\n      }));\n    });\n    \n    ws.on('message', function(data) {\n      if (resolved) return;\n      resolved = true;\n      \n      try {\n        const message = JSON.parse(data.toString());\n        \n        if (message.type === 'auth_success' && shouldSucceed) {\n          console.log('✅ Expected success: WebSocket auth succeeded');\n          ws.close();\n          resolve(true);\n        } else if (message.type === 'auth_error' && !shouldSucceed) {\n          console.log('✅ Expected failure: WebSocket auth blocked:', message.message);\n          console.log('🛡️  Security validation working correctly');\n          ws.close();\n          resolve(true);\n        } else if (message.type === 'auth_success' && !shouldSucceed) {\n          console.error('❌ SECURITY ISSUE: Auth succeeded when it should have failed!');\n          ws.close();\n          resolve(false);\n        } else if (message.type === 'auth_error' && shouldSucceed) {\n          console.error('❌ Unexpected auth error:', message.message);\n          ws.close();\n          resolve(false);\n        }\n        \n      } catch (error) {\n        console.error('Error parsing message:', error);\n        ws.close();\n        resolve(false);\n      }\n    });\n    \n    ws.on('error', function(error) {\n      if (resolved) return;\n      resolved = true;\n      console.log('⚠️  WebSocket error:', error.message);\n      resolve(false);\n    });\n    \n    ws.on('close', function() {\n      if (resolved) return;\n      resolved = true;\n      console.log('🔌 WebSocket closed');\n      resolve(true);\n    });\n    \n    // Timeout after 5 seconds\n    setTimeout(() => {\n      if (!resolved) {\n        resolved = true;\n        console.error('❌ WebSocket test timeout');\n        ws.close();\n        resolve(false);\n      }\n    }, 5000);\n  });\n}\n\nasync function testRefreshToken(refreshToken, shouldSucceed) {\n  console.log('🔄 Testing refresh token...');\n  \n  try {\n    const response = await fetch('http://localhost:5000/api/auth/refresh', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ refreshToken })\n    });\n    \n    const data = await response.json();\n    \n    if (response.ok && shouldSucceed) {\n      console.log('✅ Expected success: Refresh token worked');\n    } else if (!response.ok && !shouldSucceed) {\n      console.log('✅ Expected failure: Refresh token blocked:', data.error);\n      console.log('🛡️  Token security working correctly');\n    } else if (response.ok && !shouldSucceed) {\n      console.error('❌ SECURITY ISSUE: Refresh token worked when it should have failed!');\n    } else if (!response.ok && shouldSucceed) {\n      console.error('❌ Unexpected refresh token error:', data.error);\n    }\n    \n  } catch (error) {\n    console.error('Error testing refresh token:', error);\n  }\n}\n\ntestStatusValidation().catch(console.error);","size_bytes":5488},"test_token_invalidation.js":{"content":"import WebSocket from 'ws';\n\n// Test that old approved tokens are invalidated when user status changes to rejected\nasync function testTokenInvalidation() {\n  console.log('🔧 Testing token invalidation after status change...');\n  \n  // These are the approved tokens we got before changing status\n  const oldApprovedToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImFub25OYW1lIjoiVGVzdFVzZXIxMjM0Iiwic3RhdHVzIjoiYXBwcm92ZWQiLCJpYXQiOjE3NTc3OTE3ODksImV4cCI6MTc1Nzc5MjY4OX0.AxjVarkujZf9RNby-3iwOQ77Xlv--1jDX-GO1XEmyVQ';\n  const oldRefreshToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImFub25OYW1lIjoiVGVzdFVzZXIxMjM0Iiwic3RhdHVzIjoiYXBwcm92ZWQiLCJ0eXBlIjoicmVmcmVzaCIsImlhdCI6MTc1Nzc5MTc4OSwiZXhwIjoxNzU4Mzk2NTg5fQ.lHebbQOMWOs5RDfSmt3kD3JQdOegUub0eJr_O8IArtg';\n  \n  console.log('\\n📋 Status: TestUser1234 was APPROVED when tokens were issued');\n  console.log('📋 Status: TestUser1234 is now REJECTED in database');\n  console.log('📋 Test: Old approved tokens should be INVALIDATED');\n  \n  // Test 1: Try to authenticate new session with old approved token (should get rejected status)\n  console.log('\\n🧪 Test 1: Current authentication with rejected user');\n  const authResponse = await fetch('http://localhost:5000/api/auth/dev', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ tgId: '123456789' })\n  });\n  \n  const currentAuth = await authResponse.json();\n  console.log('🔍 Current auth status:', currentAuth.status);\n  \n  if (currentAuth.status === 'rejected') {\n    console.log('✅ Database status is correctly rejected');\n  } else {\n    console.error('❌ Expected rejected status, got:', currentAuth.status);\n    return;\n  }\n  \n  // Test 2: Try WebSocket connection with old approved token\n  console.log('\\n🧪 Test 2: WebSocket connection with old approved token');\n  const wsResult = await testWebSocketWithOldToken(oldApprovedToken);\n  \n  // Test 3: Try refresh token with old refresh token  \n  console.log('\\n🧪 Test 3: Refresh token validation');\n  await testRefreshTokenValidation(oldRefreshToken);\n  \n  console.log('\\n🎯 Token invalidation test completed!');\n  console.log('🛡️  Security Summary: Old tokens should be invalidated when status changes');\n}\n\nasync function testWebSocketWithOldToken(oldToken) {\n  return new Promise((resolve) => {\n    console.log('🔌 Testing WebSocket with old approved token...');\n    \n    const ws = new WebSocket('ws://localhost:5000/ws');\n    let resolved = false;\n    \n    ws.on('open', function() {\n      console.log('📡 WebSocket connected');\n      \n      ws.send(JSON.stringify({\n        type: 'auth',\n        token: oldToken\n      }));\n      console.log('📤 Sent old approved token for authentication');\n    });\n    \n    ws.on('message', function(data) {\n      if (resolved) return;\n      resolved = true;\n      \n      try {\n        const message = JSON.parse(data.toString());\n        console.log('📨 WebSocket response:', message);\n        \n        if (message.type === 'auth_error') {\n          console.log('✅ CORRECT: WebSocket auth failed with old token');\n          console.log('🛡️  Reason:', message.message);\n          console.log('🔒 Security working: Status change invalidated old tokens');\n          ws.close();\n          resolve(true);\n        } else if (message.type === 'auth_success') {\n          console.error('❌ SECURITY ISSUE: Old token still worked after status change!');\n          console.error('🚨 This is a major security vulnerability!');\n          ws.close();\n          resolve(false);\n        }\n        \n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n        ws.close();\n        resolve(false);\n      }\n    });\n    \n    ws.on('error', function(error) {\n      if (resolved) return;\n      resolved = true;\n      console.log('⚠️  WebSocket error:', error.message);\n      resolve(false);\n    });\n    \n    ws.on('close', function(code, reason) {\n      if (resolved) return;\n      resolved = true;\n      console.log('🔌 WebSocket closed:', code, reason.toString());\n      resolve(true);\n    });\n    \n    setTimeout(() => {\n      if (!resolved) {\n        resolved = true;\n        console.error('❌ WebSocket test timeout');\n        ws.close();\n        resolve(false);\n      }\n    }, 5000);\n  });\n}\n\nasync function testRefreshTokenValidation(oldRefreshToken) {\n  console.log('🔄 Testing old refresh token...');\n  \n  try {\n    const response = await fetch('http://localhost:5000/api/auth/refresh', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ refreshToken: oldRefreshToken })\n    });\n    \n    const data = await response.json();\n    console.log('📨 Refresh response:', { ok: response.ok, status: response.status });\n    \n    if (!response.ok) {\n      console.log('✅ CORRECT: Refresh token failed after status change');\n      console.log('🛡️  Error:', data.error);\n      console.log('🔒 Security working: Status change invalidated refresh tokens');\n    } else {\n      console.error('❌ SECURITY ISSUE: Old refresh token still worked!');\n      console.error('🚨 User can still refresh tokens after status change!');\n      console.error('📋 New auth data:', data);\n    }\n    \n  } catch (error) {\n    console.error('Error testing refresh token:', error);\n  }\n}\n\ntestTokenInvalidation().catch(console.error);","size_bytes":5427},"test_websocket.js":{"content":"import WebSocket from 'ws';\n\n// Test WebSocket connection with approved user\nasync function testWebSocket() {\n  const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjMsImFub25OYW1lIjoiVGVzdFVzZXIxMjM0Iiwic3RhdHVzIjoiYXBwcm92ZWQiLCJpYXQiOjE3NTc3OTE1NzUsImV4cCI6MTc1Nzc5MjQ3NX0.sNiqqR16yGVPj990_Ik0o4Ck3LyJ_EY34TQwTp9C9D4';\n  \n  const ws = new WebSocket('ws://localhost:5000/ws');\n  \n  ws.on('open', function() {\n    console.log('✅ WebSocket connected successfully');\n    \n    // Authenticate with TestUser1234's token\n    ws.send(JSON.stringify({\n      type: 'auth',\n      token: token\n    }));\n  });\n  \n  ws.on('message', function(data) {\n    try {\n      const message = JSON.parse(data.toString());\n      console.log('📨 Received message:', message);\n      \n      if (message.type === 'auth_success') {\n        console.log('✅ Authentication successful! User:', message.user);\n        console.log('🏠 Room ID:', message.roomId);\n        \n        // Send a test message\n        setTimeout(() => {\n          ws.send(JSON.stringify({\n            type: 'send_message',\n            content: 'Hello from TestUser1234! Integration test message 🚀',\n            roomId: message.roomId\n          }));\n          console.log('📤 Sent test message');\n        }, 1000);\n      }\n      \n      if (message.type === 'new_message') {\n        console.log('✅ Message successfully sent and received!');\n        console.log('👤 From:', message.message.user.anonName);\n        console.log('💬 Content:', message.message.content);\n        \n        // Test complete - close connection\n        setTimeout(() => {\n          ws.close();\n          console.log('🎯 WebSocket test completed successfully!');\n        }, 1000);\n      }\n      \n      if (message.type === 'auth_error') {\n        console.error('❌ Auth error:', message.message);\n        ws.close();\n      }\n      \n    } catch (error) {\n      console.error('Error parsing message:', error);\n    }\n  });\n  \n  ws.on('error', function(error) {\n    console.error('❌ WebSocket error:', error);\n  });\n  \n  ws.on('close', function() {\n    console.log('🔌 WebSocket connection closed');\n  });\n}\n\ntestWebSocket().catch(console.error);","size_bytes":2193},"test_websocket_rejected.js":{"content":"import WebSocket from 'ws';\n\n// Test WebSocket connection with rejected user (should fail)\nasync function testRejectedWebSocket() {\n  console.log('🔧 Testing WebSocket with rejected user...');\n  \n  // Get rejected user token first\n  const authResponse = await fetch('http://localhost:5000/api/auth/dev', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ tgId: '987654321' })\n  });\n  \n  const authData = await authResponse.json();\n  console.log('🔑 Auth data for rejected user:', authData);\n  \n  if (authData.status !== 'rejected') {\n    console.error('❌ Expected rejected status, got:', authData.status);\n    return;\n  }\n  \n  const token = authData.token;\n  const ws = new WebSocket('ws://localhost:5000/ws');\n  \n  ws.on('open', function() {\n    console.log('🔌 WebSocket connected (this is expected)');\n    \n    // Try to authenticate with rejected user's token\n    ws.send(JSON.stringify({\n      type: 'auth',\n      token: token\n    }));\n    console.log('📤 Sent auth request with rejected user token');\n  });\n  \n  ws.on('message', function(data) {\n    try {\n      const message = JSON.parse(data.toString());\n      console.log('📨 Received message:', message);\n      \n      if (message.type === 'auth_error') {\n        console.log('✅ EXPECTED: Auth error for rejected user:', message.message);\n        console.log('🛡️  Security working correctly - rejected users blocked');\n        \n        // Test complete\n        setTimeout(() => {\n          ws.close();\n          console.log('🎯 Rejected user WebSocket test completed successfully!');\n        }, 500);\n      }\n      \n      if (message.type === 'auth_success') {\n        console.error('❌ UNEXPECTED: Rejected user was authenticated!');\n        console.error('🚨 SECURITY ISSUE: Rejected users should not be able to connect');\n        ws.close();\n      }\n      \n    } catch (error) {\n      console.error('Error parsing message:', error);\n    }\n  });\n  \n  ws.on('error', function(error) {\n    console.log('⚠️  WebSocket error (this might be expected):', error.message);\n  });\n  \n  ws.on('close', function(code, reason) {\n    console.log('🔌 WebSocket connection closed:', code, reason.toString());\n  });\n}\n\ntestRejectedWebSocket().catch(console.error);","size_bytes":2289},"validate-production-env.js":{"content":"#!/usr/bin/env node\n\n/**\n * Production Environment Validation Script\n * Validates critical environment variables for secure production deployment\n */\n\nconsole.log('🔍 PRODUCTION ENVIRONMENT VALIDATION');\nconsole.log('=====================================\\n');\n\nconst errors = [];\nconst warnings = [];\n\n// Check NODE_ENV\nconst nodeEnv = process.env.NODE_ENV;\nconsole.log(`NODE_ENV: ${nodeEnv || 'NOT SET'}`);\nif (nodeEnv !== 'production') {\n  warnings.push('NODE_ENV is not set to \"production\"');\n}\n\n// CRITICAL: JWT_SECRET validation\nconst jwtSecret = process.env.JWT_SECRET;\nconsole.log(`JWT_SECRET: ${jwtSecret ? '✓ SET (length: ' + jwtSecret.length + ')' : '❌ NOT SET'}`);\nif (!jwtSecret) {\n  errors.push('CRITICAL: JWT_SECRET is required in production');\n} else if (jwtSecret.length < 32) {\n  errors.push('CRITICAL: JWT_SECRET is too short (minimum 32 characters for production)');\n} else if (jwtSecret === 'fallback-dev-secret-change-in-production') {\n  errors.push('CRITICAL: JWT_SECRET is using default development value');\n}\n\n// Bot Token validation\nconst botToken = process.env.TELEGRAM_BOT_TOKEN || process.env.BOT_TOKEN;\nconsole.log(`TELEGRAM_BOT_TOKEN: ${botToken ? '✓ SET' : '❌ NOT SET'}`);\nif (!botToken) {\n  errors.push('CRITICAL: TELEGRAM_BOT_TOKEN is required');\n}\n\n// Database validation\nconst dbUrl = process.env.DATABASE_URL;\nconsole.log(`DATABASE_URL: ${dbUrl ? '✓ SET' : '❌ NOT SET'}`);\nif (!dbUrl) {\n  errors.push('CRITICAL: DATABASE_URL is required');\n}\n\n// DEV_MODE should NOT be true in production\nconst devMode = process.env.DEV_MODE;\nconsole.log(`DEV_MODE: ${devMode || 'NOT SET'}`);\nif (devMode === 'true' && nodeEnv === 'production') {\n  errors.push('CRITICAL: DEV_MODE must not be \"true\" in production (security risk)');\n}\n\nconsole.log('\\n📋 VALIDATION RESULTS');\nconsole.log('=====================');\n\nif (errors.length === 0 && warnings.length === 0) {\n  console.log('✅ All checks passed! Environment is production-ready.');\n} else {\n  if (errors.length > 0) {\n    console.log('\\n❌ CRITICAL ERRORS (must fix before production):');\n    errors.forEach((error, i) => console.log(`  ${i + 1}. ${error}`));\n  }\n  \n  if (warnings.length > 0) {\n    console.log('\\n⚠️  WARNINGS:');\n    warnings.forEach((warning, i) => console.log(`  ${i + 1}. ${warning}`));\n  }\n  \n  if (errors.length > 0) {\n    console.log('\\n🚫 PRODUCTION DEPLOYMENT BLOCKED');\n    process.exit(1);\n  }\n}\n\nconsole.log('\\n🔒 Security Recommendations:');\nconsole.log('- Ensure JWT_SECRET is randomly generated and secure');\nconsole.log('- Never commit environment files or token files to git');\nconsole.log('- Regularly rotate JWT secrets');\nconsole.log('- Monitor for unauthorized access attempts');\nconsole.log('- Use HTTPS in production');","size_bytes":2763},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\n\ninterface TokenPayload {\n  userId: number;\n  anonName: string;\n  status: string;\n  iat: number;\n}\n\ninterface AuthUser {\n  id: number;\n  anonName: string;\n  status: string;\n}\n\n// Get the JWT secret with proper production validation\nfunction getJwtSecret(): string {\n  const secret = process.env.JWT_SECRET;\n  \n  // Critical production check - fail fast if no secret in production\n  if (process.env.NODE_ENV === 'production' && !secret) {\n    console.error('FATAL: JWT_SECRET is required in production environment');\n    process.exit(1);\n  }\n  \n  // Use dedicated JWT_SECRET or fallback for development only\n  return secret || process.env.SESSION_SECRET || 'fallback-dev-secret-change-in-production';\n}\n\nexport function generateAuthToken(user: AuthUser): string {\n  const secret = getJwtSecret();\n  \n  const payload = {\n    userId: user.id,\n    anonName: user.anonName,\n    status: user.status,\n    iat: Math.floor(Date.now() / 1000),\n  };\n  \n  // Short-lived tokens for WebSocket auth (15 minutes)\n  return jwt.sign(payload, secret, { expiresIn: '15m' });\n}\n\nexport function generateRefreshToken(user: AuthUser): string {\n  const secret = getJwtSecret();\n  \n  const payload = {\n    userId: user.id,\n    anonName: user.anonName,\n    status: user.status,\n    type: 'refresh',\n    iat: Math.floor(Date.now() / 1000),\n  };\n  \n  // Longer-lived refresh tokens (7 days)\n  return jwt.sign(payload, secret, { expiresIn: '7d' });\n}\n\nexport function verifyAuthToken(token: string): { userId: number; anonName: string; status: string } | null {\n  try {\n    const secret = getJwtSecret();\n    const decoded = jwt.verify(token, secret) as TokenPayload;\n    \n    if (!decoded || !decoded.userId || !decoded.status) {\n      return null;\n    }\n    \n    return {\n      userId: decoded.userId,\n      anonName: decoded.anonName,\n      status: decoded.status\n    };\n  } catch (error) {\n    console.error('Token verification error:', error);\n    return null;\n  }\n}\n\nexport function verifyRefreshToken(token: string): { userId: number; anonName: string; status: string } | null {\n  try {\n    const secret = getJwtSecret();\n    const decoded = jwt.verify(token, secret) as any;\n    \n    if (!decoded || !decoded.userId || !decoded.status || decoded.type !== 'refresh') {\n      return null;\n    }\n    \n    return {\n      userId: decoded.userId,\n      anonName: decoded.anonName,\n      status: decoded.status\n    };\n  } catch (error) {\n    console.error('Refresh token verification error:', error);\n    return null;\n  }\n}\n\nexport function isTokenExpired(token: string): boolean {\n  try {\n    const secret = getJwtSecret();\n    jwt.verify(token, secret);\n    return false;\n  } catch (error: any) {\n    return error.name === 'TokenExpiredError';\n  }\n}","size_bytes":2756},"client/src/lib/auth.ts":{"content":"import { apiRequest } from './queryClient';\n\nexport interface AuthState {\n  user: {\n    id: number;\n    anonName: string;\n    status: string;\n    createdAt: string;\n  } | null;\n  token: string | null;\n  refreshToken: string | null;\n  status: string;\n}\n\nexport interface AuthTokens {\n  token: string;\n  refreshToken: string;\n}\n\nconst AUTH_STATE_KEY = 'chat_auth_state';\nconst TOKEN_REFRESH_BUFFER = 2 * 60 * 1000; // 2 minutes before expiry\nconst TOKEN_LIFETIME = 15 * 60 * 1000; // 15 minutes in milliseconds\n\nclass AuthManager {\n  private authState: AuthState = {\n    user: null,\n    token: null,\n    refreshToken: null,\n    status: 'loading'\n  };\n\n  private refreshTimer: NodeJS.Timeout | null = null;\n  private refreshPromise: Promise<AuthTokens> | null = null;\n  private listeners: ((state: AuthState) => void)[] = [];\n\n  constructor() {\n    this.loadFromStorage();\n    this.scheduleTokenRefresh();\n  }\n\n  // Load auth state from localStorage\n  private loadFromStorage() {\n    try {\n      const stored = localStorage.getItem(AUTH_STATE_KEY);\n      if (stored) {\n        const parsedState = JSON.parse(stored);\n        // Only restore if tokens exist and are potentially still valid\n        if (parsedState.token && parsedState.refreshToken) {\n          this.authState = { ...this.authState, ...parsedState };\n        }\n      }\n    } catch (error) {\n      console.error('Failed to load auth state from storage:', error);\n      this.clearStorage();\n    }\n  }\n\n  // Save auth state to localStorage\n  private saveToStorage() {\n    try {\n      localStorage.setItem(AUTH_STATE_KEY, JSON.stringify(this.authState));\n    } catch (error) {\n      console.error('Failed to save auth state to storage:', error);\n    }\n  }\n\n  // Clear stored auth data\n  private clearStorage() {\n    try {\n      localStorage.removeItem(AUTH_STATE_KEY);\n    } catch (error) {\n      console.error('Failed to clear auth storage:', error);\n    }\n  }\n\n  // Update auth state and notify listeners\n  private updateAuthState(newState: Partial<AuthState>) {\n    const prevState = { ...this.authState };\n    this.authState = { ...this.authState, ...newState };\n    \n    // Save to storage if we have tokens\n    if (this.authState.token && this.authState.refreshToken) {\n      this.saveToStorage();\n    } else {\n      this.clearStorage();\n    }\n\n    // Notify listeners only if state actually changed\n    if (JSON.stringify(prevState) !== JSON.stringify(this.authState)) {\n      this.listeners.forEach(listener => listener(this.authState));\n    }\n\n    // Schedule next refresh if we got new tokens\n    if (newState.token && newState.refreshToken) {\n      this.scheduleTokenRefresh();\n    }\n  }\n\n  // Schedule the next token refresh\n  private scheduleTokenRefresh() {\n    // Clear existing timer\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n\n    // Only schedule if we have tokens\n    if (!this.authState.token || !this.authState.refreshToken) {\n      return;\n    }\n\n    // Schedule refresh 2 minutes before token expires (13 minutes from now)\n    const refreshDelay = TOKEN_LIFETIME - TOKEN_REFRESH_BUFFER;\n    \n    this.refreshTimer = setTimeout(() => {\n      this.refreshToken().catch(error => {\n        console.error('Automatic token refresh failed:', error);\n        // If refresh fails, mark user as needing to re-authenticate\n        this.updateAuthState({\n          token: null,\n          refreshToken: null,\n          status: 'expired'\n        });\n      });\n    }, refreshDelay);\n\n    console.log(`Token refresh scheduled in ${refreshDelay / 1000 / 60} minutes`);\n  }\n\n  // Set initial auth data (from login/dev auth)\n  setAuthData(authData: {\n    user: AuthState['user'];\n    status: string;\n    token: string;\n    refreshToken: string;\n  }) {\n    this.updateAuthState({\n      user: authData.user,\n      token: authData.token,\n      refreshToken: authData.refreshToken,\n      status: authData.status\n    });\n  }\n\n  // Get current auth state\n  getAuthState(): AuthState {\n    return { ...this.authState };\n  }\n\n  // Get current valid token (with automatic refresh if needed)\n  async getValidToken(): Promise<string | null> {\n    // If no token, return null\n    if (!this.authState.token) {\n      return null;\n    }\n\n    // If refresh is already in progress, wait for it\n    if (this.refreshPromise) {\n      try {\n        const tokens = await this.refreshPromise;\n        return tokens.token;\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        return null;\n      }\n    }\n\n    // Return current token (assume it's valid since we refresh proactively)\n    return this.authState.token;\n  }\n\n  // Refresh the access token using refresh token\n  async refreshToken(): Promise<AuthTokens> {\n    // If already refreshing, return the existing promise\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    if (!this.authState.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    this.refreshPromise = (async () => {\n      try {\n        const response = await apiRequest('POST', '/api/auth/refresh', {\n          refreshToken: this.authState.refreshToken\n        });\n        \n        const data = await response.json();\n\n        // Update auth state with new tokens\n        this.updateAuthState({\n          user: data.user,\n          status: data.status,\n          token: data.token,\n          refreshToken: data.refreshToken\n        });\n\n        return {\n          token: data.token,\n          refreshToken: data.refreshToken\n        };\n      } catch (error) {\n        console.error('Token refresh failed:', error);\n        // Clear tokens on refresh failure\n        this.updateAuthState({\n          token: null,\n          refreshToken: null,\n          status: 'expired'\n        });\n        throw error;\n      } finally {\n        // Clear the refresh promise\n        this.refreshPromise = null;\n      }\n    })();\n\n    return this.refreshPromise;\n  }\n\n  // Handle auth error (e.g., from WebSocket)\n  async handleAuthError(): Promise<boolean> {\n    console.log('Handling auth error, attempting token refresh...');\n    \n    try {\n      await this.refreshToken();\n      return true; // Successfully refreshed\n    } catch (error) {\n      console.error('Failed to refresh token after auth error:', error);\n      // Mark as expired so user can re-authenticate\n      this.updateAuthState({\n        token: null,\n        refreshToken: null,\n        status: 'expired'\n      });\n      return false; // Failed to refresh\n    }\n  }\n\n  // Subscribe to auth state changes\n  subscribe(listener: (state: AuthState) => void) {\n    this.listeners.push(listener);\n    // Immediately notify with current state\n    listener(this.authState);\n    \n    // Return unsubscribe function\n    return () => {\n      const index = this.listeners.indexOf(listener);\n      if (index > -1) {\n        this.listeners.splice(index, 1);\n      }\n    };\n  }\n\n  // Clear all auth data (logout)\n  clearAuth() {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n    \n    this.refreshPromise = null;\n    \n    this.updateAuthState({\n      user: null,\n      token: null,\n      refreshToken: null,\n      status: 'loading'\n    });\n  }\n\n  // Check if user is authenticated\n  isAuthenticated(): boolean {\n    return !!(this.authState.token && this.authState.user && this.authState.status === 'approved');\n  }\n\n  // Cleanup (call when component unmounts or app closes)\n  cleanup() {\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.refreshTimer = null;\n    }\n    this.refreshPromise = null;\n    this.listeners = [];\n  }\n}\n\n// Create singleton instance\nexport const authManager = new AuthManager();\n\n// React hook for using auth state\nimport { useState, useEffect } from 'react';\n\nexport function useAuth() {\n  const [authState, setAuthState] = useState<AuthState>(authManager.getAuthState());\n\n  useEffect(() => {\n    const unsubscribe = authManager.subscribe(setAuthState);\n    return unsubscribe;\n  }, []);\n\n  return {\n    ...authState,\n    refreshToken: () => authManager.refreshToken(),\n    getValidToken: () => authManager.getValidToken(),\n    handleAuthError: () => authManager.handleAuthError(),\n    setAuthData: (data: Parameters<typeof authManager.setAuthData>[0]) => authManager.setAuthData(data),\n    clearAuth: () => authManager.clearAuth(),\n    isAuthenticated: () => authManager.isAuthenticated(),\n  };\n}\n\n// Cleanup on page unload\nif (typeof window !== 'undefined') {\n  window.addEventListener('beforeunload', () => {\n    authManager.cleanup();\n  });\n}","size_bytes":8603}},"version":1}